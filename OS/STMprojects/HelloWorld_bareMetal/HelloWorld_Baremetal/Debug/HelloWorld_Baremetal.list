
HelloWorld_Baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb0  08004eb0  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb8  08004eb8  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb8  08004eb8  00005eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004ec0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004250  20000014  08004ed4  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004264  08004ed4  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013875  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed2  00000000  00000000  000198b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0001c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e15  00000000  00000000  0001d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ab5  00000000  00000000  0001e7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001505b  00000000  00000000  00042262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df970  00000000  00000000  000572bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136c2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  00136c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0013b79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004e20 	.word	0x08004e20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08004e20 	.word	0x08004e20

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b2d      	ldr	r3, [pc, #180]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a2c      	ldr	r2, [pc, #176]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a25      	ldr	r2, [pc, #148]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a1e      	ldr	r2, [pc, #120]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	4812      	ldr	r0, [pc, #72]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000580:	f000 fd4a 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <MX_GPIO_Init+0xd8>)
 800059c:	f000 fba8 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a0:	2320      	movs	r3, #32
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 80005b8:	f000 fb9a 	bl	8000cf0 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	@ 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020800 	.word	0x40020800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fa67 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f817 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ff89 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f9c5 	bl	8000970 <MX_USART2_UART_Init>
//    		// Priority assigned to the task
//    		mainTASK_PRIORITY,
//    		// Task handle. Not required
//    		NULL
//    	);
  xTaskCreate(
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	f240 5262 	movw	r2, #1378	@ 0x562
 80005f4:	4903      	ldr	r1, [pc, #12]	@ (8000604 <main+0x34>)
 80005f6:	4804      	ldr	r0, [pc, #16]	@ (8000608 <main+0x38>)
 80005f8:	f002 fc86 	bl	8002f08 <xTaskCreate>
    		mainTASK_PRIORITY,
    		// Task handle. Not required
    		NULL
    	);
  // Give control to the scheduler
  vTaskStartScheduler();
 80005fc:	f002 fe52 	bl	80032a4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x30>
 8000604:	08004e38 	.word	0x08004e38
 8000608:	080006e9 	.word	0x080006e9

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2234      	movs	r2, #52	@ 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fbc6 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <SystemClock_Config+0xd4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a29      	ldr	r2, [pc, #164]	@ (80006e0 <SystemClock_Config+0xd4>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <SystemClock_Config+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <SystemClock_Config+0xd8>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000688:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f86c 	bl	8001778 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006a6:	f000 f881 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fcda 	bl	8001080 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006d2:	f000 f86b 	bl	80007ac <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	@ 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <vTaskFunction3>:

/* USER CODE BEGIN 4 */
void vTaskFunction3(void *pvParameters) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	(void) pvParameters;
	//uint8_t str[] = "Hello world!\r\n";

    for (;;) {
        // Task code: print a message
    	for (int i = 0; i < 3; ++i) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	e011      	b.n	800071a <vTaskFunction3+0x32>
    		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006f6:	2120      	movs	r1, #32
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <vTaskFunction3+0x9c>)
 80006fa:	f000 fca6 	bl	800104a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(500));
 80006fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000702:	f002 fd4f 	bl	80031a4 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000706:	2120      	movs	r1, #32
 8000708:	481e      	ldr	r0, [pc, #120]	@ (8000784 <vTaskFunction3+0x9c>)
 800070a:	f000 fc9e 	bl	800104a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(250));
 800070e:	20fa      	movs	r0, #250	@ 0xfa
 8000710:	f002 fd48 	bl	80031a4 <vTaskDelay>
    	for (int i = 0; i < 3; ++i) {
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	2b02      	cmp	r3, #2
 800071e:	ddea      	ble.n	80006f6 <vTaskFunction3+0xe>
		}
    	for (int i = 0; i < 3; ++i) {
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	e011      	b.n	800074a <vTaskFunction3+0x62>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000726:	2120      	movs	r1, #32
 8000728:	4816      	ldr	r0, [pc, #88]	@ (8000784 <vTaskFunction3+0x9c>)
 800072a:	f000 fc8e 	bl	800104a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(1500));
 800072e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000732:	f002 fd37 	bl	80031a4 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000736:	2120      	movs	r1, #32
 8000738:	4812      	ldr	r0, [pc, #72]	@ (8000784 <vTaskFunction3+0x9c>)
 800073a:	f000 fc86 	bl	800104a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(250));
 800073e:	20fa      	movs	r0, #250	@ 0xfa
 8000740:	f002 fd30 	bl	80031a4 <vTaskDelay>
    	for (int i = 0; i < 3; ++i) {
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	3301      	adds	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b02      	cmp	r3, #2
 800074e:	ddea      	ble.n	8000726 <vTaskFunction3+0x3e>
    	}
    	for (int i = 0; i < 3; ++i) {
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e011      	b.n	800077a <vTaskFunction3+0x92>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000756:	2120      	movs	r1, #32
 8000758:	480a      	ldr	r0, [pc, #40]	@ (8000784 <vTaskFunction3+0x9c>)
 800075a:	f000 fc76 	bl	800104a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(500));
 800075e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000762:	f002 fd1f 	bl	80031a4 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000766:	2120      	movs	r1, #32
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <vTaskFunction3+0x9c>)
 800076a:	f000 fc6e 	bl	800104a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(250));
 800076e:	20fa      	movs	r0, #250	@ 0xfa
 8000770:	f002 fd18 	bl	80031a4 <vTaskDelay>
    	for (int i = 0; i < 3; ++i) {
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b02      	cmp	r3, #2
 800077e:	ddea      	ble.n	8000756 <vTaskFunction3+0x6e>
    	for (int i = 0; i < 3; ++i) {
 8000780:	e7b6      	b.n	80006f0 <vTaskFunction3+0x8>
 8000782:	bf00      	nop
 8000784:	40020000 	.word	0x40020000

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f9a7 	bl	8000aec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40001000 	.word	0x40001000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	@ 0x38
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <HAL_InitTick+0xe4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a32      	ldr	r2, [pc, #200]	@ (80008ec <HAL_InitTick+0xe4>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <HAL_InitTick+0xe4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	f003 0310 	and.w	r3, r3, #16
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000834:	f107 0210 	add.w	r2, r7, #16
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fd38 	bl	80012b4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800084e:	f000 fd09 	bl	8001264 <HAL_RCC_GetPCLK1Freq>
 8000852:	6378      	str	r0, [r7, #52]	@ 0x34
 8000854:	e004      	b.n	8000860 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000856:	f000 fd05 	bl	8001264 <HAL_RCC_GetPCLK1Freq>
 800085a:	4603      	mov	r3, r0
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000862:	4a23      	ldr	r2, [pc, #140]	@ (80008f0 <HAL_InitTick+0xe8>)
 8000864:	fba2 2303 	umull	r2, r3, r2, r3
 8000868:	0c9b      	lsrs	r3, r3, #18
 800086a:	3b01      	subs	r3, #1
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <HAL_InitTick+0xec>)
 8000870:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <HAL_InitTick+0xf0>)
 8000872:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <HAL_InitTick+0xec>)
 8000876:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800087a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800087c:	4a1d      	ldr	r2, [pc, #116]	@ (80008f4 <HAL_InitTick+0xec>)
 800087e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000880:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <HAL_InitTick+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <HAL_InitTick+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <HAL_InitTick+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000894:	4817      	ldr	r0, [pc, #92]	@ (80008f4 <HAL_InitTick+0xec>)
 8000896:	f001 fa0d 	bl	8001cb4 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d11b      	bne.n	80008e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008a8:	4812      	ldr	r0, [pc, #72]	@ (80008f4 <HAL_InitTick+0xec>)
 80008aa:	f001 fa5d 	bl	8001d68 <HAL_TIM_Base_Start_IT>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d111      	bne.n	80008e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008bc:	2036      	movs	r0, #54	@ 0x36
 80008be:	f000 fa09 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d808      	bhi.n	80008da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2036      	movs	r0, #54	@ 0x36
 80008ce:	f000 f9e5 	bl	8000c9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <HAL_InitTick+0xf4>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e002      	b.n	80008e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3738      	adds	r7, #56	@ 0x38
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	20000030 	.word	0x20000030
 80008f8:	40001000 	.word	0x40001000
 80008fc:	20000004 	.word	0x20000004

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <NMI_Handler+0x4>

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <UsageFault_Handler+0x4>

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <TIM6_DAC_IRQHandler+0x10>)
 800093e:	f001 fa83 	bl	8001e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000030 	.word	0x20000030

0800094c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <MX_USART2_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a8:	f001 fc26 	bl	80021f8 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f7ff fefb 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000078 	.word	0x20000078
 80009c0:	40004400 	.word	0x40004400

080009c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <HAL_UART_MspInit+0x84>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12b      	bne.n	8000a3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <HAL_UART_MspInit+0x88>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <HAL_UART_MspInit+0x88>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <HAL_UART_MspInit+0x88>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_UART_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <HAL_UART_MspInit+0x88>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_UART_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <HAL_UART_MspInit+0x8c>)
 8000a3a:	f000 f959 	bl	8000cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	@ 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a58:	f7ff ff78 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f004 f99b 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fda3 	bl	80005d0 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a98:	08004ec0 	.word	0x08004ec0
  ldr r2, =_sbss
 8000a9c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aa0:	20004264 	.word	0x20004264

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f8d8 	bl	8000c86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f7ff fe96 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fe6c 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200000c0 	.word	0x200000c0

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200000c0 	.word	0x200000c0

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	@ (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff4c 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cae:	f7ff ff61 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	6978      	ldr	r0, [r7, #20]
 8000cba:	f7ff ffb1 	bl	8000c20 <NVIC_EncodePriority>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff80 	bl	8000bcc <__NVIC_SetPriority>
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff54 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	e165      	b.n	8000fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	f040 8154 	bne.w	8000fd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d005      	beq.n	8000d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d130      	bne.n	8000da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	f003 0201 	and.w	r2, r3, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d017      	beq.n	8000de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d123      	bne.n	8000e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	69b9      	ldr	r1, [r7, #24]
 8000e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0203 	and.w	r2, r3, #3
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80ae 	beq.w	8000fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff0 <HAL_GPIO_Init+0x300>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ff0 <HAL_GPIO_Init+0x300>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff0 <HAL_GPIO_Init+0x300>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e92:	4a58      	ldr	r2, [pc, #352]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ff8 <HAL_GPIO_Init+0x308>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x21a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8000ffc <HAL_GPIO_Init+0x30c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x216>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4d      	ldr	r2, [pc, #308]	@ (8001000 <HAL_GPIO_Init+0x310>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x212>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8001004 <HAL_GPIO_Init+0x314>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x20e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8001008 <HAL_GPIO_Init+0x318>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x20a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800100c <HAL_GPIO_Init+0x31c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x206>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a49      	ldr	r2, [pc, #292]	@ (8001010 <HAL_GPIO_Init+0x320>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x202>
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e00c      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	e00a      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e008      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x21c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	f002 0203 	and.w	r2, r2, #3
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1c:	4935      	ldr	r1, [pc, #212]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4e:	4a31      	ldr	r2, [pc, #196]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f54:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f78:	4a26      	ldr	r2, [pc, #152]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7e:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fcc:	4a11      	ldr	r2, [pc, #68]	@ (8001014 <HAL_GPIO_Init+0x324>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	f67f ae96 	bls.w	8000d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3724      	adds	r7, #36	@ 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020800 	.word	0x40020800
 8001004:	40020c00 	.word	0x40020c00
 8001008:	40021000 	.word	0x40021000
 800100c:	40021400 	.word	0x40021400
 8001010:	40021800 	.word	0x40021800
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	041a      	lsls	r2, r3, #16
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43d9      	mvns	r1, r3
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	400b      	ands	r3, r1
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0cc      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001094:	4b68      	ldr	r3, [pc, #416]	@ (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d90c      	bls.n	80010bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a2:	4b65      	ldr	r3, [pc, #404]	@ (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010aa:	4b63      	ldr	r3, [pc, #396]	@ (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d001      	beq.n	80010bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0b8      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d020      	beq.n	800110a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d4:	4b59      	ldr	r3, [pc, #356]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4a58      	ldr	r2, [pc, #352]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ec:	4b53      	ldr	r3, [pc, #332]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a52      	ldr	r2, [pc, #328]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f8:	4b50      	ldr	r3, [pc, #320]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	494d      	ldr	r1, [pc, #308]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	4313      	orrs	r3, r2
 8001108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d044      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4b47      	ldr	r3, [pc, #284]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d119      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e07f      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d003      	beq.n	800113e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113a:	2b03      	cmp	r3, #3
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d109      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e06f      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	4b3b      	ldr	r3, [pc, #236]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e067      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115e:	4b37      	ldr	r3, [pc, #220]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f023 0203 	bic.w	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4934      	ldr	r1, [pc, #208]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	4313      	orrs	r3, r2
 800116e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001170:	f7ff fcd0 	bl	8000b14 <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001176:	e00a      	b.n	800118e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f7ff fccc 	bl	8000b14 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001186:	4293      	cmp	r3, r2
 8001188:	d901      	bls.n	800118e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e04f      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 020c 	and.w	r2, r3, #12
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	429a      	cmp	r2, r3
 800119e:	d1eb      	bne.n	8001178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011a0:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d20c      	bcs.n	80011c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ae:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e032      	b.n	800122e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d008      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4916      	ldr	r1, [pc, #88]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	490e      	ldr	r1, [pc, #56]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	4313      	orrs	r3, r2
 8001204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001206:	f000 f887 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 800120a:	4602      	mov	r2, r0
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	490a      	ldr	r1, [pc, #40]	@ (8001240 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	5ccb      	ldrb	r3, [r1, r3]
 800121a:	fa22 f303 	lsr.w	r3, r2, r3
 800121e:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <HAL_RCC_ClockConfig+0x1c8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff faee 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023c00 	.word	0x40023c00
 800123c:	40023800 	.word	0x40023800
 8001240:	08004e98 	.word	0x08004e98
 8001244:	20000000 	.word	0x20000000
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_RCC_GetHCLKFreq+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001268:	f7ff fff0 	bl	800124c <HAL_RCC_GetHCLKFreq>
 800126c:	4602      	mov	r2, r0
 800126e:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	0a9b      	lsrs	r3, r3, #10
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	4903      	ldr	r1, [pc, #12]	@ (8001288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800127a:	5ccb      	ldrb	r3, [r1, r3]
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001280:	4618      	mov	r0, r3
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	08004ea8 	.word	0x08004ea8

0800128c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001290:	f7ff ffdc 	bl	800124c <HAL_RCC_GetHCLKFreq>
 8001294:	4602      	mov	r2, r0
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	0b5b      	lsrs	r3, r3, #13
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	4903      	ldr	r1, [pc, #12]	@ (80012b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012a2:	5ccb      	ldrb	r3, [r1, r3]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	08004ea8 	.word	0x08004ea8

080012b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	220f      	movs	r2, #15
 80012c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_RCC_GetClockConfig+0x5c>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_RCC_GetClockConfig+0x5c>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_RCC_GetClockConfig+0x5c>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_RCC_GetClockConfig+0x5c>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <HAL_RCC_GetClockConfig+0x60>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 020f 	and.w	r2, r3, #15
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40023c00 	.word	0x40023c00

08001318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800131c:	b0ae      	sub	sp, #184	@ 0xb8
 800131e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800133e:	4bcb      	ldr	r3, [pc, #812]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b0c      	cmp	r3, #12
 8001348:	f200 8206 	bhi.w	8001758 <HAL_RCC_GetSysClockFreq+0x440>
 800134c:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <HAL_RCC_GetSysClockFreq+0x3c>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001389 	.word	0x08001389
 8001358:	08001759 	.word	0x08001759
 800135c:	08001759 	.word	0x08001759
 8001360:	08001759 	.word	0x08001759
 8001364:	08001391 	.word	0x08001391
 8001368:	08001759 	.word	0x08001759
 800136c:	08001759 	.word	0x08001759
 8001370:	08001759 	.word	0x08001759
 8001374:	08001399 	.word	0x08001399
 8001378:	08001759 	.word	0x08001759
 800137c:	08001759 	.word	0x08001759
 8001380:	08001759 	.word	0x08001759
 8001384:	08001589 	.word	0x08001589
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001388:	4bb9      	ldr	r3, [pc, #740]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x358>)
 800138a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800138e:	e1e7      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001390:	4bb8      	ldr	r3, [pc, #736]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001396:	e1e3      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001398:	4bb4      	ldr	r3, [pc, #720]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a4:	4bb1      	ldr	r3, [pc, #708]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d071      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b0:	4bae      	ldr	r3, [pc, #696]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	099b      	lsrs	r3, r3, #6
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013d6:	4622      	mov	r2, r4
 80013d8:	462b      	mov	r3, r5
 80013da:	f04f 0000 	mov.w	r0, #0
 80013de:	f04f 0100 	mov.w	r1, #0
 80013e2:	0159      	lsls	r1, r3, #5
 80013e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013e8:	0150      	lsls	r0, r2, #5
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4621      	mov	r1, r4
 80013f0:	1a51      	subs	r1, r2, r1
 80013f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80013f4:	4629      	mov	r1, r5
 80013f6:	eb63 0301 	sbc.w	r3, r3, r1
 80013fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001408:	4649      	mov	r1, r9
 800140a:	018b      	lsls	r3, r1, #6
 800140c:	4641      	mov	r1, r8
 800140e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001412:	4641      	mov	r1, r8
 8001414:	018a      	lsls	r2, r1, #6
 8001416:	4641      	mov	r1, r8
 8001418:	1a51      	subs	r1, r2, r1
 800141a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800141c:	4649      	mov	r1, r9
 800141e:	eb63 0301 	sbc.w	r3, r3, r1
 8001422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001430:	4649      	mov	r1, r9
 8001432:	00cb      	lsls	r3, r1, #3
 8001434:	4641      	mov	r1, r8
 8001436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800143a:	4641      	mov	r1, r8
 800143c:	00ca      	lsls	r2, r1, #3
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	4603      	mov	r3, r0
 8001444:	4622      	mov	r2, r4
 8001446:	189b      	adds	r3, r3, r2
 8001448:	633b      	str	r3, [r7, #48]	@ 0x30
 800144a:	462b      	mov	r3, r5
 800144c:	460a      	mov	r2, r1
 800144e:	eb42 0303 	adc.w	r3, r2, r3
 8001452:	637b      	str	r3, [r7, #52]	@ 0x34
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001460:	4629      	mov	r1, r5
 8001462:	024b      	lsls	r3, r1, #9
 8001464:	4621      	mov	r1, r4
 8001466:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800146a:	4621      	mov	r1, r4
 800146c:	024a      	lsls	r2, r1, #9
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001476:	2200      	movs	r2, #0
 8001478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800147c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001480:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001484:	f7fe febe 	bl	8000204 <__aeabi_uldivmod>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4613      	mov	r3, r2
 800148e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001492:	e067      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001494:	4b75      	ldr	r3, [pc, #468]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	099b      	lsrs	r3, r3, #6
 800149a:	2200      	movs	r2, #0
 800149c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014ae:	2300      	movs	r3, #0
 80014b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014b6:	4622      	mov	r2, r4
 80014b8:	462b      	mov	r3, r5
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	0159      	lsls	r1, r3, #5
 80014c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c8:	0150      	lsls	r0, r2, #5
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4621      	mov	r1, r4
 80014d0:	1a51      	subs	r1, r2, r1
 80014d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014d4:	4629      	mov	r1, r5
 80014d6:	eb63 0301 	sbc.w	r3, r3, r1
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80014e8:	4649      	mov	r1, r9
 80014ea:	018b      	lsls	r3, r1, #6
 80014ec:	4641      	mov	r1, r8
 80014ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f2:	4641      	mov	r1, r8
 80014f4:	018a      	lsls	r2, r1, #6
 80014f6:	4641      	mov	r1, r8
 80014f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80014fc:	4649      	mov	r1, r9
 80014fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800150e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001512:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001516:	4692      	mov	sl, r2
 8001518:	469b      	mov	fp, r3
 800151a:	4623      	mov	r3, r4
 800151c:	eb1a 0303 	adds.w	r3, sl, r3
 8001520:	623b      	str	r3, [r7, #32]
 8001522:	462b      	mov	r3, r5
 8001524:	eb4b 0303 	adc.w	r3, fp, r3
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001536:	4629      	mov	r1, r5
 8001538:	028b      	lsls	r3, r1, #10
 800153a:	4621      	mov	r1, r4
 800153c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001540:	4621      	mov	r1, r4
 8001542:	028a      	lsls	r2, r1, #10
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800154c:	2200      	movs	r2, #0
 800154e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001550:	677a      	str	r2, [r7, #116]	@ 0x74
 8001552:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001556:	f7fe fe55 	bl	8000204 <__aeabi_uldivmod>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4613      	mov	r3, r2
 8001560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001564:	4b41      	ldr	r3, [pc, #260]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	3301      	adds	r3, #1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800157a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001586:	e0eb      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001588:	4b38      	ldr	r3, [pc, #224]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001594:	4b35      	ldr	r3, [pc, #212]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d06b      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b32      	ldr	r3, [pc, #200]	@ (800166c <HAL_RCC_GetSysClockFreq+0x354>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80015b4:	2300      	movs	r3, #0
 80015b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80015b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015bc:	4622      	mov	r2, r4
 80015be:	462b      	mov	r3, r5
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	0159      	lsls	r1, r3, #5
 80015ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015ce:	0150      	lsls	r0, r2, #5
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4621      	mov	r1, r4
 80015d6:	1a51      	subs	r1, r2, r1
 80015d8:	61b9      	str	r1, [r7, #24]
 80015da:	4629      	mov	r1, r5
 80015dc:	eb63 0301 	sbc.w	r3, r3, r1
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80015ee:	4659      	mov	r1, fp
 80015f0:	018b      	lsls	r3, r1, #6
 80015f2:	4651      	mov	r1, sl
 80015f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f8:	4651      	mov	r1, sl
 80015fa:	018a      	lsls	r2, r1, #6
 80015fc:	4651      	mov	r1, sl
 80015fe:	ebb2 0801 	subs.w	r8, r2, r1
 8001602:	4659      	mov	r1, fp
 8001604:	eb63 0901 	sbc.w	r9, r3, r1
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001614:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001618:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800161c:	4690      	mov	r8, r2
 800161e:	4699      	mov	r9, r3
 8001620:	4623      	mov	r3, r4
 8001622:	eb18 0303 	adds.w	r3, r8, r3
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	462b      	mov	r3, r5
 800162a:	eb49 0303 	adc.w	r3, r9, r3
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800163c:	4629      	mov	r1, r5
 800163e:	024b      	lsls	r3, r1, #9
 8001640:	4621      	mov	r1, r4
 8001642:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001646:	4621      	mov	r1, r4
 8001648:	024a      	lsls	r2, r1, #9
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001652:	2200      	movs	r2, #0
 8001654:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001656:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001658:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800165c:	f7fe fdd2 	bl	8000204 <__aeabi_uldivmod>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4613      	mov	r3, r2
 8001666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800166a:	e065      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x420>
 800166c:	40023800 	.word	0x40023800
 8001670:	00f42400 	.word	0x00f42400
 8001674:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001678:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x458>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	2200      	movs	r2, #0
 8001680:	4618      	mov	r0, r3
 8001682:	4611      	mov	r1, r2
 8001684:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001688:	653b      	str	r3, [r7, #80]	@ 0x50
 800168a:	2300      	movs	r3, #0
 800168c:	657b      	str	r3, [r7, #84]	@ 0x54
 800168e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001692:	4642      	mov	r2, r8
 8001694:	464b      	mov	r3, r9
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4641      	mov	r1, r8
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	4649      	mov	r1, r9
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016c4:	4659      	mov	r1, fp
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4651      	mov	r1, sl
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4651      	mov	r1, sl
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4651      	mov	r1, sl
 80016d4:	1a54      	subs	r4, r2, r1
 80016d6:	4659      	mov	r1, fp
 80016d8:	eb63 0501 	sbc.w	r5, r3, r1
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	00eb      	lsls	r3, r5, #3
 80016e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ea:	00e2      	lsls	r2, r4, #3
 80016ec:	4614      	mov	r4, r2
 80016ee:	461d      	mov	r5, r3
 80016f0:	4643      	mov	r3, r8
 80016f2:	18e3      	adds	r3, r4, r3
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	464b      	mov	r3, r9
 80016f8:	eb45 0303 	adc.w	r3, r5, r3
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800170a:	4629      	mov	r1, r5
 800170c:	028b      	lsls	r3, r1, #10
 800170e:	4621      	mov	r1, r4
 8001710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001714:	4621      	mov	r1, r4
 8001716:	028a      	lsls	r2, r1, #10
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001720:	2200      	movs	r2, #0
 8001722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001724:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001726:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800172a:	f7fe fd6b 	bl	8000204 <__aeabi_uldivmod>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4613      	mov	r3, r2
 8001734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x458>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	0f1b      	lsrs	r3, r3, #28
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800174a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001756:	e003      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x45c>)
 800175a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800175e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001764:	4618      	mov	r0, r3
 8001766:	37b8      	adds	r7, #184	@ 0xb8
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	00f42400 	.word	0x00f42400

08001778 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e28d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8083 	beq.w	800189e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001798:	4b94      	ldr	r3, [pc, #592]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d019      	beq.n	80017d8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017a4:	4b91      	ldr	r3, [pc, #580]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
        || \
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017b0:	4b8e      	ldr	r3, [pc, #568]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b8b      	ldr	r3, [pc, #556]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b84      	ldr	r3, [pc, #528]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d05b      	beq.n	800189c <HAL_RCC_OscConfig+0x124>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e25a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x90>
 80017fa:	4b7c      	ldr	r3, [pc, #496]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7b      	ldr	r2, [pc, #492]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xcc>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0xb4>
 8001812:	4b76      	ldr	r3, [pc, #472]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a75      	ldr	r2, [pc, #468]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b73      	ldr	r3, [pc, #460]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a72      	ldr	r2, [pc, #456]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xcc>
 800182c:	4b6f      	ldr	r3, [pc, #444]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a6e      	ldr	r2, [pc, #440]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b6c      	ldr	r3, [pc, #432]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6b      	ldr	r2, [pc, #428]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f962 	bl	8000b14 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff f95e 	bl	8000b14 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	@ 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e21f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b61      	ldr	r3, [pc, #388]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xdc>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f94e 	bl	8000b14 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f94a 	bl	8000b14 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	@ 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e20b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b57      	ldr	r3, [pc, #348]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x104>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06f      	beq.n	800198a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018aa:	4b50      	ldr	r3, [pc, #320]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d017      	beq.n	80018e6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018b6:	4b4d      	ldr	r3, [pc, #308]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
        || \
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018c2:	4b4a      	ldr	r3, [pc, #296]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018da:	4b44      	ldr	r3, [pc, #272]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x186>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1d3      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b3b      	ldr	r3, [pc, #236]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4937      	ldr	r1, [pc, #220]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <HAL_RCC_OscConfig+0x278>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f8f7 	bl	8000b14 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff f8f3 	bl	8000b14 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1b4      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4925      	ldr	r1, [pc, #148]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_RCC_OscConfig+0x278>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f8d6 	bl	8000b14 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff f8d2 	bl	8000b14 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e193      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d036      	beq.n	8001a04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff f8b6 	bl	8000b14 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff f8b2 	bl	8000b14 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e173      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80019c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x234>
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_OscConfig+0x27c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff f89f 	bl	8000b14 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	e00e      	b.n	80019f8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff f89b 	bl	8000b14 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d907      	bls.n	80019f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e15c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	42470000 	.word	0x42470000
 80019f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ea      	bne.n	80019da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8097 	beq.w	8001b40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	4b83      	ldr	r3, [pc, #524]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b7f      	ldr	r3, [pc, #508]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b7c      	ldr	r3, [pc, #496]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b79      	ldr	r3, [pc, #484]	@ (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b76      	ldr	r3, [pc, #472]	@ (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a75      	ldr	r2, [pc, #468]	@ (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f85b 	bl	8000b14 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff f857 	bl	8000b14 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e118      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b6c      	ldr	r3, [pc, #432]	@ (8001c28 <HAL_RCC_OscConfig+0x4b0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x31e>
 8001a88:	4b66      	ldr	r3, [pc, #408]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8c:	4a65      	ldr	r2, [pc, #404]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a94:	e01c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x358>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x340>
 8001a9e:	4b61      	ldr	r3, [pc, #388]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	4a60      	ldr	r2, [pc, #384]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aae:	4a5d      	ldr	r2, [pc, #372]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x358>
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abc:	4a59      	ldr	r2, [pc, #356]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac4:	4b57      	ldr	r3, [pc, #348]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac8:	4a56      	ldr	r2, [pc, #344]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f81c 	bl	8000b14 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f818 	bl	8000b14 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0d7      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	4b4b      	ldr	r3, [pc, #300]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0ee      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x368>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff f806 	bl	8000b14 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f802 	bl	8000b14 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0c1      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	4b40      	ldr	r3, [pc, #256]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80ad 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4a:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d060      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d145      	bne.n	8001bea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b33      	ldr	r3, [pc, #204]	@ (8001c2c <HAL_RCC_OscConfig+0x4b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7fe ffd6 	bl	8000b14 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe ffd2 	bl	8000b14 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e093      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b29      	ldr	r3, [pc, #164]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	071b      	lsls	r3, r3, #28
 8001bb6:	491b      	ldr	r1, [pc, #108]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_RCC_OscConfig+0x4b4>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7fe ffa7 	bl	8000b14 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7fe ffa3 	bl	8000b14 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e064      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x452>
 8001be8:	e05c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_RCC_OscConfig+0x4b4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7fe ff90 	bl	8000b14 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7fe ff8c 	bl	8000b14 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e04d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x480>
 8001c16:	e045      	b.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e040      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <HAL_RCC_OscConfig+0x538>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d030      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d129      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d122      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d119      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e041      	b.n	8001d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f839 	bl	8001d52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 f9c0 	bl	8002078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d001      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e04e      	b.n	8001e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a23      	ldr	r2, [pc, #140]	@ (8001e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d022      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001daa:	d01d      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d018      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1e      	ldr	r2, [pc, #120]	@ (8001e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00e      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1b      	ldr	r2, [pc, #108]	@ (8001e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a18      	ldr	r2, [pc, #96]	@ (8001e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d111      	bne.n	8001e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d010      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0a:	e007      	b.n	8001e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800
 8001e38:	40000c00 	.word	0x40000c00
 8001e3c:	40010400 	.word	0x40010400
 8001e40:	40014000 	.word	0x40014000
 8001e44:	40001800 	.word	0x40001800

08001e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d020      	beq.n	8001eac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0202 	mvn.w	r2, #2
 8001e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8d2 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8c4 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8d5 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0204 	mvn.w	r2, #4
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8ac 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f89e 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8af 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d020      	beq.n	8001f44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0208 	mvn.w	r2, #8
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f886 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f878 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f889 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d020      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01b      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0210 	mvn.w	r2, #16
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2208      	movs	r2, #8
 8001f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f860 	bl	800203c <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f852 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f863 	bl	8002050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0201 	mvn.w	r2, #1
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fbea 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f906 	bl	80021e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f834 	bl	8002064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0220 	mvn.w	r2, #32
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8d8 	bl	80021d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a46      	ldr	r2, [pc, #280]	@ (80021a4 <TIM_Base_SetConfig+0x12c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002096:	d00f      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a43      	ldr	r2, [pc, #268]	@ (80021a8 <TIM_Base_SetConfig+0x130>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00b      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a42      	ldr	r2, [pc, #264]	@ (80021ac <TIM_Base_SetConfig+0x134>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a41      	ldr	r2, [pc, #260]	@ (80021b0 <TIM_Base_SetConfig+0x138>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d003      	beq.n	80020b8 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	@ (80021b4 <TIM_Base_SetConfig+0x13c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d108      	bne.n	80020ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a35      	ldr	r2, [pc, #212]	@ (80021a4 <TIM_Base_SetConfig+0x12c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d8:	d027      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a32      	ldr	r2, [pc, #200]	@ (80021a8 <TIM_Base_SetConfig+0x130>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d023      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a31      	ldr	r2, [pc, #196]	@ (80021ac <TIM_Base_SetConfig+0x134>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a30      	ldr	r2, [pc, #192]	@ (80021b0 <TIM_Base_SetConfig+0x138>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01b      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2f      	ldr	r2, [pc, #188]	@ (80021b4 <TIM_Base_SetConfig+0x13c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d017      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	@ (80021b8 <TIM_Base_SetConfig+0x140>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <TIM_Base_SetConfig+0x144>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00f      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2c      	ldr	r2, [pc, #176]	@ (80021c0 <TIM_Base_SetConfig+0x148>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00b      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2b      	ldr	r2, [pc, #172]	@ (80021c4 <TIM_Base_SetConfig+0x14c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2a      	ldr	r2, [pc, #168]	@ (80021c8 <TIM_Base_SetConfig+0x150>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d003      	beq.n	800212a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a29      	ldr	r2, [pc, #164]	@ (80021cc <TIM_Base_SetConfig+0x154>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d108      	bne.n	800213c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <TIM_Base_SetConfig+0x12c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <TIM_Base_SetConfig+0xf8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <TIM_Base_SetConfig+0x13c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d103      	bne.n	8002178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f023 0201 	bic.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
  }
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40010400 	.word	0x40010400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	40001800 	.word	0x40001800
 80021c8:	40001c00 	.word	0x40001c00
 80021cc:	40002000 	.word	0x40002000

080021d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e042      	b.n	8002290 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fbd0 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2224      	movs	r2, #36	@ 0x24
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800223a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f82b 	bl	8002298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b0c0      	sub	sp, #256	@ 0x100
 800229e:	af00      	add	r7, sp, #0
 80022a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b4:	68d9      	ldr	r1, [r3, #12]
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	ea40 0301 	orr.w	r3, r0, r1
 80022c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80022f0:	f021 010c 	bic.w	r1, r1, #12
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022fe:	430b      	orrs	r3, r1
 8002300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002312:	6999      	ldr	r1, [r3, #24]
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	ea40 0301 	orr.w	r3, r0, r1
 800231e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b8f      	ldr	r3, [pc, #572]	@ (8002564 <UART_SetConfig+0x2cc>)
 8002328:	429a      	cmp	r2, r3
 800232a:	d005      	beq.n	8002338 <UART_SetConfig+0xa0>
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b8d      	ldr	r3, [pc, #564]	@ (8002568 <UART_SetConfig+0x2d0>)
 8002334:	429a      	cmp	r2, r3
 8002336:	d104      	bne.n	8002342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002338:	f7fe ffa8 	bl	800128c <HAL_RCC_GetPCLK2Freq>
 800233c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002340:	e003      	b.n	800234a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002342:	f7fe ff8f 	bl	8001264 <HAL_RCC_GetPCLK1Freq>
 8002346:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800234a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002354:	f040 810c 	bne.w	8002570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800235c:	2200      	movs	r2, #0
 800235e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002362:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	1891      	adds	r1, r2, r2
 8002370:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002372:	415b      	adcs	r3, r3
 8002374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800237a:	4621      	mov	r1, r4
 800237c:	eb12 0801 	adds.w	r8, r2, r1
 8002380:	4629      	mov	r1, r5
 8002382:	eb43 0901 	adc.w	r9, r3, r1
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800239a:	4690      	mov	r8, r2
 800239c:	4699      	mov	r9, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	eb18 0303 	adds.w	r3, r8, r3
 80023a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023a8:	462b      	mov	r3, r5
 80023aa:	eb49 0303 	adc.w	r3, r9, r3
 80023ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023c6:	460b      	mov	r3, r1
 80023c8:	18db      	adds	r3, r3, r3
 80023ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80023cc:	4613      	mov	r3, r2
 80023ce:	eb42 0303 	adc.w	r3, r2, r3
 80023d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80023d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80023dc:	f7fd ff12 	bl	8000204 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4b61      	ldr	r3, [pc, #388]	@ (800256c <UART_SetConfig+0x2d4>)
 80023e6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	011c      	lsls	r4, r3, #4
 80023ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80023fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	1891      	adds	r1, r2, r2
 8002406:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002408:	415b      	adcs	r3, r3
 800240a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800240c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002410:	4641      	mov	r1, r8
 8002412:	eb12 0a01 	adds.w	sl, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb43 0b01 	adc.w	fp, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800242c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002430:	4692      	mov	sl, r2
 8002432:	469b      	mov	fp, r3
 8002434:	4643      	mov	r3, r8
 8002436:	eb1a 0303 	adds.w	r3, sl, r3
 800243a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800243e:	464b      	mov	r3, r9
 8002440:	eb4b 0303 	adc.w	r3, fp, r3
 8002444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002454:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800245c:	460b      	mov	r3, r1
 800245e:	18db      	adds	r3, r3, r3
 8002460:	643b      	str	r3, [r7, #64]	@ 0x40
 8002462:	4613      	mov	r3, r2
 8002464:	eb42 0303 	adc.w	r3, r2, r3
 8002468:	647b      	str	r3, [r7, #68]	@ 0x44
 800246a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800246e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002472:	f7fd fec7 	bl	8000204 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4611      	mov	r1, r2
 800247c:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <UART_SetConfig+0x2d4>)
 800247e:	fba3 2301 	umull	r2, r3, r3, r1
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2264      	movs	r2, #100	@ 0x64
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002492:	4b36      	ldr	r3, [pc, #216]	@ (800256c <UART_SetConfig+0x2d4>)
 8002494:	fba3 2302 	umull	r2, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024a0:	441c      	add	r4, r3
 80024a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	1891      	adds	r1, r2, r2
 80024ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024bc:	415b      	adcs	r3, r3
 80024be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024c4:	4641      	mov	r1, r8
 80024c6:	1851      	adds	r1, r2, r1
 80024c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80024ca:	4649      	mov	r1, r9
 80024cc:	414b      	adcs	r3, r1
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80024dc:	4659      	mov	r1, fp
 80024de:	00cb      	lsls	r3, r1, #3
 80024e0:	4651      	mov	r1, sl
 80024e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024e6:	4651      	mov	r1, sl
 80024e8:	00ca      	lsls	r2, r1, #3
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	4642      	mov	r2, r8
 80024f2:	189b      	adds	r3, r3, r2
 80024f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024f8:	464b      	mov	r3, r9
 80024fa:	460a      	mov	r2, r1
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002510:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002518:	460b      	mov	r3, r1
 800251a:	18db      	adds	r3, r3, r3
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800251e:	4613      	mov	r3, r2
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800252a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800252e:	f7fd fe69 	bl	8000204 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <UART_SetConfig+0x2d4>)
 8002538:	fba3 1302 	umull	r1, r3, r3, r2
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	2164      	movs	r1, #100	@ 0x64
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	3332      	adds	r3, #50	@ 0x32
 800254a:	4a08      	ldr	r2, [pc, #32]	@ (800256c <UART_SetConfig+0x2d4>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	f003 0207 	and.w	r2, r3, #7
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4422      	add	r2, r4
 800255e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002560:	e106      	b.n	8002770 <UART_SetConfig+0x4d8>
 8002562:	bf00      	nop
 8002564:	40011000 	.word	0x40011000
 8002568:	40011400 	.word	0x40011400
 800256c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800257a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800257e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002582:	4642      	mov	r2, r8
 8002584:	464b      	mov	r3, r9
 8002586:	1891      	adds	r1, r2, r2
 8002588:	6239      	str	r1, [r7, #32]
 800258a:	415b      	adcs	r3, r3
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
 800258e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002592:	4641      	mov	r1, r8
 8002594:	1854      	adds	r4, r2, r1
 8002596:	4649      	mov	r1, r9
 8002598:	eb43 0501 	adc.w	r5, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	00eb      	lsls	r3, r5, #3
 80025a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025aa:	00e2      	lsls	r2, r4, #3
 80025ac:	4614      	mov	r4, r2
 80025ae:	461d      	mov	r5, r3
 80025b0:	4643      	mov	r3, r8
 80025b2:	18e3      	adds	r3, r4, r3
 80025b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025b8:	464b      	mov	r3, r9
 80025ba:	eb45 0303 	adc.w	r3, r5, r3
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025de:	4629      	mov	r1, r5
 80025e0:	008b      	lsls	r3, r1, #2
 80025e2:	4621      	mov	r1, r4
 80025e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025e8:	4621      	mov	r1, r4
 80025ea:	008a      	lsls	r2, r1, #2
 80025ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80025f0:	f7fd fe08 	bl	8000204 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4b60      	ldr	r3, [pc, #384]	@ (800277c <UART_SetConfig+0x4e4>)
 80025fa:	fba3 2302 	umull	r2, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	011c      	lsls	r4, r3, #4
 8002602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800260c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	1891      	adds	r1, r2, r2
 800261a:	61b9      	str	r1, [r7, #24]
 800261c:	415b      	adcs	r3, r3
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002624:	4641      	mov	r1, r8
 8002626:	1851      	adds	r1, r2, r1
 8002628:	6139      	str	r1, [r7, #16]
 800262a:	4649      	mov	r1, r9
 800262c:	414b      	adcs	r3, r1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800263c:	4659      	mov	r1, fp
 800263e:	00cb      	lsls	r3, r1, #3
 8002640:	4651      	mov	r1, sl
 8002642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002646:	4651      	mov	r1, sl
 8002648:	00ca      	lsls	r2, r1, #3
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4603      	mov	r3, r0
 8002650:	4642      	mov	r2, r8
 8002652:	189b      	adds	r3, r3, r2
 8002654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002658:	464b      	mov	r3, r9
 800265a:	460a      	mov	r2, r1
 800265c:	eb42 0303 	adc.w	r3, r2, r3
 8002660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800266e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800267c:	4649      	mov	r1, r9
 800267e:	008b      	lsls	r3, r1, #2
 8002680:	4641      	mov	r1, r8
 8002682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002686:	4641      	mov	r1, r8
 8002688:	008a      	lsls	r2, r1, #2
 800268a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800268e:	f7fd fdb9 	bl	8000204 <__aeabi_uldivmod>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4611      	mov	r1, r2
 8002698:	4b38      	ldr	r3, [pc, #224]	@ (800277c <UART_SetConfig+0x4e4>)
 800269a:	fba3 2301 	umull	r2, r3, r3, r1
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2264      	movs	r2, #100	@ 0x64
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	1acb      	subs	r3, r1, r3
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	3332      	adds	r3, #50	@ 0x32
 80026ac:	4a33      	ldr	r2, [pc, #204]	@ (800277c <UART_SetConfig+0x4e4>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b8:	441c      	add	r4, r3
 80026ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026be:	2200      	movs	r2, #0
 80026c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80026c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80026c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026c8:	4642      	mov	r2, r8
 80026ca:	464b      	mov	r3, r9
 80026cc:	1891      	adds	r1, r2, r2
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	415b      	adcs	r3, r3
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d8:	4641      	mov	r1, r8
 80026da:	1851      	adds	r1, r2, r1
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	4649      	mov	r1, r9
 80026e0:	414b      	adcs	r3, r1
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026f0:	4659      	mov	r1, fp
 80026f2:	00cb      	lsls	r3, r1, #3
 80026f4:	4651      	mov	r1, sl
 80026f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fa:	4651      	mov	r1, sl
 80026fc:	00ca      	lsls	r2, r1, #3
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	4603      	mov	r3, r0
 8002704:	4642      	mov	r2, r8
 8002706:	189b      	adds	r3, r3, r2
 8002708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800270a:	464b      	mov	r3, r9
 800270c:	460a      	mov	r2, r1
 800270e:	eb42 0303 	adc.w	r3, r2, r3
 8002712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	663b      	str	r3, [r7, #96]	@ 0x60
 800271e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800272c:	4649      	mov	r1, r9
 800272e:	008b      	lsls	r3, r1, #2
 8002730:	4641      	mov	r1, r8
 8002732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002736:	4641      	mov	r1, r8
 8002738:	008a      	lsls	r2, r1, #2
 800273a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800273e:	f7fd fd61 	bl	8000204 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <UART_SetConfig+0x4e4>)
 8002748:	fba3 1302 	umull	r1, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	2164      	movs	r1, #100	@ 0x64
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	3332      	adds	r3, #50	@ 0x32
 800275a:	4a08      	ldr	r2, [pc, #32]	@ (800277c <UART_SetConfig+0x4e4>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	f003 020f 	and.w	r2, r3, #15
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4422      	add	r2, r4
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002776:	46bd      	mov	sp, r7
 8002778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277c:	51eb851f 	.word	0x51eb851f

08002780 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0208 	add.w	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002798:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f103 0208 	add.w	r2, r3, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0208 	add.w	r2, r3, #8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027f0:	d103      	bne.n	80027fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e00c      	b.n	8002814 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3308      	adds	r3, #8
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e002      	b.n	8002808 <vListInsert+0x2e>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d2f6      	bcs.n	8002802 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6892      	ldr	r2, [r2, #8]
 8002862:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	d103      	bne.n	8002880 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d05d      	beq.n	8002992 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d059      	beq.n	8002992 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e6:	2100      	movs	r1, #0
 80028e8:	fba3 2302 	umull	r2, r3, r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d000      	beq.n	80028f2 <xQueueGenericReset+0x52>
 80028f0:	2101      	movs	r1, #1
 80028f2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d14c      	bne.n	8002992 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80028f8:	f001 fef2 	bl	80046e0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	6939      	ldr	r1, [r7, #16]
 8002906:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	441a      	add	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2200      	movs	r2, #0
 8002916:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	3b01      	subs	r3, #1
 800292a:	6939      	ldr	r1, [r7, #16]
 800292c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	441a      	add	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	22ff      	movs	r2, #255	@ 0xff
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	22ff      	movs	r2, #255	@ 0xff
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d114      	bne.n	8002978 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01a      	beq.n	800298c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	3310      	adds	r3, #16
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fff4 	bl	8003948 <xTaskRemoveFromEventList>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d012      	beq.n	800298c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <xQueueGenericReset+0x120>)
 8002968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	e009      	b.n	800298c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	3310      	adds	r3, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff feff 	bl	8002780 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3324      	adds	r3, #36	@ 0x24
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fefa 	bl	8002780 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800298c:	f001 feda 	bl	8004744 <vPortExitCritical>
 8002990:	e001      	b.n	8002996 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <xQueueGenericReset+0x114>
    __asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	60bb      	str	r3, [r7, #8]
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80029b4:	697b      	ldr	r3, [r7, #20]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d02e      	beq.n	8002a3a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80029dc:	2100      	movs	r1, #0
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	fba3 2302 	umull	r2, r3, r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d000      	beq.n	80029ec <xQueueGenericCreate+0x28>
 80029ea:	2101      	movs	r1, #1
 80029ec:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d123      	bne.n	8002a3a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( uxQueueLength * uxItemSize ) ) )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80029fa:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80029fe:	d81c      	bhi.n	8002a3a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3350      	adds	r3, #80	@ 0x50
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 ff46 	bl	80048a0 <pvPortMalloc>
 8002a14:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01d      	beq.n	8002a58 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3350      	adds	r3, #80	@ 0x50
 8002a24:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a26:	79fa      	ldrb	r2, [r7, #7]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f815 	bl	8002a62 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002a38:	e00e      	b.n	8002a58 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <xQueueGenericCreate+0x94>
    __asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	613b      	str	r3, [r7, #16]
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8002a58:	69fb      	ldr	r3, [r7, #28]
    }
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e002      	b.n	8002a84 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a90:	2101      	movs	r1, #1
 8002a92:	69b8      	ldr	r0, [r7, #24]
 8002a94:	f7ff ff04 	bl	80028a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	@ 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10b      	bne.n	8002ada <xQueueReceive+0x32>
    __asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	623b      	str	r3, [r7, #32]
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	e7fd      	b.n	8002ad6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <xQueueReceive+0x40>
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <xQueueReceive+0x44>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <xQueueReceive+0x46>
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10b      	bne.n	8002b0a <xQueueReceive+0x62>
    __asm volatile
 8002af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	61fb      	str	r3, [r7, #28]
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	e7fd      	b.n	8002b06 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b0a:	f001 f933 	bl	8003d74 <xTaskGetSchedulerState>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <xQueueReceive+0x72>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <xQueueReceive+0x76>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <xQueueReceive+0x78>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <xQueueReceive+0x94>
    __asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	61bb      	str	r3, [r7, #24]
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b3c:	f001 fdd0 	bl	80046e0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01f      	beq.n	8002b8c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b50:	f000 f88c 	bl	8002c6c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00f      	beq.n	8002b84 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	3310      	adds	r3, #16
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 feed 	bl	8003948 <xTaskRemoveFromEventList>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b74:	4b3c      	ldr	r3, [pc, #240]	@ (8002c68 <xQueueReceive+0x1c0>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b84:	f001 fdde 	bl	8004744 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e069      	b.n	8002c60 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b92:	f001 fdd7 	bl	8004744 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e062      	b.n	8002c60 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 ffa9 	bl	8003afc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bae:	f001 fdc9 	bl	8004744 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bb2:	f000 fbbb 	bl	800332c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bb6:	f001 fd93 	bl	80046e0 <vPortEnterCritical>
 8002bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bc6:	d103      	bne.n	8002bd0 <xQueueReceive+0x128>
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bdc:	d103      	bne.n	8002be6 <xQueueReceive+0x13e>
 8002bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002be6:	f001 fdad 	bl	8004744 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bea:	1d3a      	adds	r2, r7, #4
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 ff98 	bl	8003b28 <xTaskCheckForTimeOut>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d123      	bne.n	8002c46 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c00:	f000 f8ac 	bl	8002d5c <prvIsQueueEmpty>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d017      	beq.n	8002c3a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	3324      	adds	r3, #36	@ 0x24
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fe2c 	bl	8003870 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c1a:	f000 f84d 	bl	8002cb8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c1e:	f000 fb93 	bl	8003348 <xTaskResumeAll>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d189      	bne.n	8002b3c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <xQueueReceive+0x1c0>)
 8002c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	e780      	b.n	8002b3c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c3c:	f000 f83c 	bl	8002cb8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c40:	f000 fb82 	bl	8003348 <xTaskResumeAll>
 8002c44:	e77a      	b.n	8002b3c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c48:	f000 f836 	bl	8002cb8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c4c:	f000 fb7c 	bl	8003348 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c52:	f000 f883 	bl	8002d5c <prvIsQueueEmpty>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f43f af6f 	beq.w	8002b3c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8002c5e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3730      	adds	r7, #48	@ 0x30
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	441a      	add	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d303      	bcc.n	8002ca0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68d9      	ldr	r1, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6838      	ldr	r0, [r7, #0]
 8002cac:	f002 f8aa 	bl	8004e04 <memcpy>
    }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cc0:	f001 fd0e 	bl	80046e0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ccc:	e011      	b.n	8002cf2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3324      	adds	r3, #36	@ 0x24
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fe34 	bl	8003948 <xTaskRemoveFromEventList>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002ce6:	f000 ff87 	bl	8003bf8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	dce9      	bgt.n	8002cce <prvUnlockQueue+0x16>
 8002cfa:	e000      	b.n	8002cfe <prvUnlockQueue+0x46>
                    break;
 8002cfc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	22ff      	movs	r2, #255	@ 0xff
 8002d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d06:	f001 fd1d 	bl	8004744 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d0a:	f001 fce9 	bl	80046e0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d14:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d16:	e011      	b.n	8002d3c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3310      	adds	r3, #16
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fe0f 	bl	8003948 <xTaskRemoveFromEventList>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d30:	f000 ff62 	bl	8003bf8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	dce9      	bgt.n	8002d18 <prvUnlockQueue+0x60>
 8002d44:	e000      	b.n	8002d48 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d46:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	22ff      	movs	r2, #255	@ 0xff
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002d50:	f001 fcf8 	bl	8004744 <vPortExitCritical>
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d64:	f001 fcbc 	bl	80046e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e001      	b.n	8002d7a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d7a:	f001 fce3 	bl	8004744 <vPortExitCritical>

    return xReturn;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	60fb      	str	r3, [r7, #12]
}
 8002dae:	bf00      	nop
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d024      	beq.n	8002e04 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e01e      	b.n	8002dfe <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002dc0:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <vQueueAddToRegistry+0x9c>)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d105      	bne.n	8002ddc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4a13      	ldr	r2, [pc, #76]	@ (8002e24 <vQueueAddToRegistry+0x9c>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
                    break;
 8002dda:	e013      	b.n	8002e04 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <vQueueAddToRegistry+0x70>
 8002de2:	4a10      	ldr	r2, [pc, #64]	@ (8002e24 <vQueueAddToRegistry+0x9c>)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <vQueueAddToRegistry+0x9c>)
 8002df4:	4413      	add	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b07      	cmp	r3, #7
 8002e02:	d9dd      	bls.n	8002dc0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	200000c4 	.word	0x200000c4

08002e28 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e38:	f001 fc52 	bl	80046e0 <vPortEnterCritical>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e42:	b25b      	sxtb	r3, r3
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e48:	d103      	bne.n	8002e52 <vQueueWaitForMessageRestricted+0x2a>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e5e:	d103      	bne.n	8002e68 <vQueueWaitForMessageRestricted+0x40>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e68:	f001 fc6c 	bl	8004744 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3324      	adds	r3, #36	@ 0x24
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fd1d 	bl	80038bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff18 	bl	8002cb8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af04      	add	r7, sp, #16
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 fcfc 	bl	80048a0 <pvPortMalloc>
 8002ea8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002eb0:	205c      	movs	r0, #92	@ 0x5c
 8002eb2:	f001 fcf5 	bl	80048a0 <pvPortMalloc>
 8002eb6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ebe:	225c      	movs	r2, #92	@ 0x5c
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f001 ff72 	bl	8004dac <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ece:	e005      	b.n	8002edc <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002ed0:	6938      	ldr	r0, [r7, #16]
 8002ed2:	f001 fe1d 	bl	8004b10 <vPortFree>
 8002ed6:	e001      	b.n	8002edc <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9303      	str	r3, [sp, #12]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	9302      	str	r3, [sp, #8]
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f828 	bl	8002f4e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002efe:	697b      	ldr	r3, [r7, #20]
    }
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff ffb3 	bl	8002e90 <prvCreateTask>
 8002f2a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002f32:	6938      	ldr	r0, [r7, #16]
 8002f34:	f000 f89c 	bl	8003070 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e002      	b.n	8002f44 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f42:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8002f44:	697b      	ldr	r3, [r7, #20]
    }
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b088      	sub	sp, #32
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	461a      	mov	r2, r3
 8002f66:	21a5      	movs	r1, #165	@ 0xa5
 8002f68:	f001 ff20 	bl	8004dac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f76:	3b01      	subs	r3, #1
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f023 0307 	bic.w	r3, r3, #7
 8002f84:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	617b      	str	r3, [r7, #20]
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01e      	beq.n	8002fec <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	e012      	b.n	8002fda <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	7819      	ldrb	r1, [r3, #0]
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3334      	adds	r3, #52	@ 0x34
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d9e9      	bls.n	8002fb4 <prvInitialiseNewTask+0x66>
 8002fe0:	e000      	b.n	8002fe4 <prvInitialiseNewTask+0x96>
            {
                break;
 8002fe2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fee:	2b37      	cmp	r3, #55	@ 0x37
 8002ff0:	d90b      	bls.n	800300a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	613b      	str	r3, [r7, #16]
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800300a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300c:	2b37      	cmp	r3, #55	@ 0x37
 800300e:	d901      	bls.n	8003014 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003010:	2337      	movs	r3, #55	@ 0x37
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800301e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	3304      	adds	r3, #4
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fbcb 	bl	80027c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	3318      	adds	r3, #24
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fbc6 	bl	80027c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003038:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003042:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	69b8      	ldr	r0, [r7, #24]
 8003050:	f001 f9cc 	bl	80043ec <pxPortInitialiseStack>
 8003054:	4602      	mov	r2, r0
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003064:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003066:	bf00      	nop
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003078:	f001 fb32 	bl	80046e0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800307c:	4b42      	ldr	r3, [pc, #264]	@ (8003188 <prvAddNewTaskToReadyList+0x118>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a41      	ldr	r2, [pc, #260]	@ (8003188 <prvAddNewTaskToReadyList+0x118>)
 8003084:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003086:	4b41      	ldr	r3, [pc, #260]	@ (800318c <prvAddNewTaskToReadyList+0x11c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800308e:	4a3f      	ldr	r2, [pc, #252]	@ (800318c <prvAddNewTaskToReadyList+0x11c>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003094:	4b3c      	ldr	r3, [pc, #240]	@ (8003188 <prvAddNewTaskToReadyList+0x118>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d110      	bne.n	80030be <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800309c:	f000 fdd0 	bl	8003c40 <prvInitialiseTaskLists>
 80030a0:	e00d      	b.n	80030be <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80030a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <prvAddNewTaskToReadyList+0x120>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030aa:	4b38      	ldr	r3, [pc, #224]	@ (800318c <prvAddNewTaskToReadyList+0x11c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d802      	bhi.n	80030be <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80030b8:	4a34      	ldr	r2, [pc, #208]	@ (800318c <prvAddNewTaskToReadyList+0x11c>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80030be:	4b35      	ldr	r3, [pc, #212]	@ (8003194 <prvAddNewTaskToReadyList+0x124>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a33      	ldr	r2, [pc, #204]	@ (8003194 <prvAddNewTaskToReadyList+0x124>)
 80030c6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030c8:	4b32      	ldr	r3, [pc, #200]	@ (8003194 <prvAddNewTaskToReadyList+0x124>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d4:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <prvAddNewTaskToReadyList+0x128>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d903      	bls.n	80030e4 <prvAddNewTaskToReadyList+0x74>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003198 <prvAddNewTaskToReadyList+0x128>)
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e8:	492c      	ldr	r1, [pc, #176]	@ (800319c <prvAddNewTaskToReadyList+0x12c>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3304      	adds	r3, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	3204      	adds	r2, #4
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1d1a      	adds	r2, r3, #4
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4a1d      	ldr	r2, [pc, #116]	@ (800319c <prvAddNewTaskToReadyList+0x12c>)
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	615a      	str	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003132:	491a      	ldr	r1, [pc, #104]	@ (800319c <prvAddNewTaskToReadyList+0x12c>)
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	4815      	ldr	r0, [pc, #84]	@ (800319c <prvAddNewTaskToReadyList+0x12c>)
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4403      	add	r3, r0
 8003152:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003154:	f001 faf6 	bl	8004744 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003158:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <prvAddNewTaskToReadyList+0x120>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00e      	beq.n	800317e <prvAddNewTaskToReadyList+0x10e>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <prvAddNewTaskToReadyList+0x11c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	429a      	cmp	r2, r3
 800316c:	d207      	bcs.n	800317e <prvAddNewTaskToReadyList+0x10e>
 800316e:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <prvAddNewTaskToReadyList+0x130>)
 8003170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200005d8 	.word	0x200005d8
 800318c:	20000104 	.word	0x20000104
 8003190:	200005e4 	.word	0x200005e4
 8003194:	200005f4 	.word	0x200005f4
 8003198:	200005e0 	.word	0x200005e0
 800319c:	20000108 	.word	0x20000108
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80031b6:	f000 f8b9 	bl	800332c <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80031ba:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <vTaskDelay+0x64>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d00b      	beq.n	80031da <vTaskDelay+0x36>
    __asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	60bb      	str	r3, [r7, #8]
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	e7fd      	b.n	80031d6 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031da:	2100      	movs	r1, #0
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fde7 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80031e2:	f000 f8b1 	bl	8003348 <xTaskResumeAll>
 80031e6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80031ee:	4b07      	ldr	r3, [pc, #28]	@ (800320c <vTaskDelay+0x68>)
 80031f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000600 	.word	0x20000600
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003216:	2301      	movs	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e011      	b.n	8003248 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003224:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <prvCreateIdleTasks+0x88>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4413      	add	r3, r2
 800322a:	7819      	ldrb	r1, [r3, #0]
 800322c:	463a      	mov	r2, r7
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	4413      	add	r3, r2
 8003232:	460a      	mov	r2, r1
 8003234:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003236:	463a      	mov	r2, r7
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	4413      	add	r3, r2
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3301      	adds	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b0f      	cmp	r3, #15
 800324c:	ddea      	ble.n	8003224 <prvCreateIdleTasks+0x14>
 800324e:	e000      	b.n	8003252 <prvCreateIdleTasks+0x42>
        {
            break;
 8003250:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e015      	b.n	8003284 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <prvCreateIdleTasks+0x8c>)
 800325a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4a0f      	ldr	r2, [pc, #60]	@ (80032a0 <prvCreateIdleTasks+0x90>)
 8003262:	4413      	add	r3, r2
 8003264:	4639      	mov	r1, r7
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2300      	movs	r3, #0
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	2280      	movs	r2, #128	@ 0x80
 8003270:	6938      	ldr	r0, [r7, #16]
 8003272:	f7ff fe49 	bl	8002f08 <xTaskCreate>
 8003276:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d106      	bne.n	800328c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	3301      	adds	r3, #1
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	dde6      	ble.n	8003258 <prvCreateIdleTasks+0x48>
 800328a:	e000      	b.n	800328e <prvCreateIdleTasks+0x7e>
        {
            break;
 800328c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800328e:	69fb      	ldr	r3, [r7, #28]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	08004e80 	.word	0x08004e80
 800329c:	08003c11 	.word	0x08003c11
 80032a0:	200005fc 	.word	0x200005fc

080032a4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80032aa:	f7ff ffb1 	bl	8003210 <prvCreateIdleTasks>
 80032ae:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d102      	bne.n	80032bc <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80032b6:	f000 fdeb 	bl	8003e90 <xTimerCreateTimerTask>
 80032ba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d116      	bne.n	80032f0 <vTaskStartScheduler+0x4c>
    __asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	60bb      	str	r3, [r7, #8]
}
 80032d4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80032d6:	4b11      	ldr	r3, [pc, #68]	@ (800331c <vTaskStartScheduler+0x78>)
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032de:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <vTaskStartScheduler+0x7c>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <vTaskStartScheduler+0x80>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80032ea:	f001 f909 	bl	8004500 <xPortStartScheduler>
 80032ee:	e00f      	b.n	8003310 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f6:	d10b      	bne.n	8003310 <vTaskStartScheduler+0x6c>
    __asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	607b      	str	r3, [r7, #4]
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <vTaskStartScheduler+0x84>)
 8003312:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200005f8 	.word	0x200005f8
 8003320:	200005e4 	.word	0x200005e4
 8003324:	200005dc 	.word	0x200005dc
 8003328:	2000000c 	.word	0x2000000c

0800332c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003330:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <vTaskSuspendAll+0x18>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	4a03      	ldr	r2, [pc, #12]	@ (8003344 <vTaskSuspendAll+0x18>)
 8003338:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800333a:	bf00      	nop
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	20000600 	.word	0x20000600

08003348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003356:	f001 f9c3 	bl	80046e0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800335e:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <xTaskResumeAll+0x1f0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10b      	bne.n	800337e <xTaskResumeAll+0x36>
    __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	603b      	str	r3, [r7, #0]
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	e7fd      	b.n	800337a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800337e:	4b6e      	ldr	r3, [pc, #440]	@ (8003538 <xTaskResumeAll+0x1f0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	4a6c      	ldr	r2, [pc, #432]	@ (8003538 <xTaskResumeAll+0x1f0>)
 8003386:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003388:	4b6b      	ldr	r3, [pc, #428]	@ (8003538 <xTaskResumeAll+0x1f0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 80cb 	bne.w	8003528 <xTaskResumeAll+0x1e0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003392:	4b6a      	ldr	r3, [pc, #424]	@ (800353c <xTaskResumeAll+0x1f4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80c6 	beq.w	8003528 <xTaskResumeAll+0x1e0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800339c:	e08f      	b.n	80034be <xTaskResumeAll+0x176>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800339e:	4b68      	ldr	r3, [pc, #416]	@ (8003540 <xTaskResumeAll+0x1f8>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	6a12      	ldr	r2, [r2, #32]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	69d2      	ldr	r2, [r2, #28]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3318      	adds	r3, #24
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d103      	bne.n	80033d4 <xTaskResumeAll+0x8c>
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1e5a      	subs	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	68d2      	ldr	r2, [r2, #12]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	429a      	cmp	r2, r3
 8003408:	d103      	bne.n	8003412 <xTaskResumeAll+0xca>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2200      	movs	r2, #0
 8003416:	615a      	str	r2, [r3, #20]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <xTaskResumeAll+0x1fc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d903      	bls.n	8003436 <xTaskResumeAll+0xee>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	4a44      	ldr	r2, [pc, #272]	@ (8003544 <xTaskResumeAll+0x1fc>)
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343a:	4943      	ldr	r1, [pc, #268]	@ (8003548 <xTaskResumeAll+0x200>)
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3304      	adds	r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	3204      	adds	r2, #4
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4a33      	ldr	r2, [pc, #204]	@ (8003548 <xTaskResumeAll+0x200>)
 800347a:	441a      	add	r2, r3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	615a      	str	r2, [r3, #20]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003484:	4930      	ldr	r1, [pc, #192]	@ (8003548 <xTaskResumeAll+0x200>)
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003496:	1c59      	adds	r1, r3, #1
 8003498:	482b      	ldr	r0, [pc, #172]	@ (8003548 <xTaskResumeAll+0x200>)
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034aa:	4b28      	ldr	r3, [pc, #160]	@ (800354c <xTaskResumeAll+0x204>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d904      	bls.n	80034be <xTaskResumeAll+0x176>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80034b4:	4a26      	ldr	r2, [pc, #152]	@ (8003550 <xTaskResumeAll+0x208>)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2101      	movs	r1, #1
 80034ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <xTaskResumeAll+0x1f8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f47f af6b 	bne.w	800339e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <xTaskResumeAll+0x18a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80034ce:	f000 fc35 	bl	8003d3c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034d2:	4b20      	ldr	r3, [pc, #128]	@ (8003554 <xTaskResumeAll+0x20c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <xTaskResumeAll+0x1bc>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80034de:	f000 f84d 	bl	800357c <xTaskIncrementTick>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d004      	beq.n	80034f2 <xTaskResumeAll+0x1aa>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80034e8:	4a19      	ldr	r2, [pc, #100]	@ (8003550 <xTaskResumeAll+0x208>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2101      	movs	r1, #1
 80034ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ef      	bne.n	80034de <xTaskResumeAll+0x196>

                            xPendedTicks = 0;
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <xTaskResumeAll+0x20c>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003504:	4a12      	ldr	r2, [pc, #72]	@ (8003550 <xTaskResumeAll+0x208>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <xTaskResumeAll+0x1e0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003514:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <xTaskResumeAll+0x204>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <xTaskResumeAll+0x210>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003528:	f001 f90c 	bl	8004744 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800352c:	69bb      	ldr	r3, [r7, #24]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000600 	.word	0x20000600
 800353c:	200005d8 	.word	0x200005d8
 8003540:	20000598 	.word	0x20000598
 8003544:	200005e0 	.word	0x200005e0
 8003548:	20000108 	.word	0x20000108
 800354c:	20000104 	.word	0x20000104
 8003550:	200005ec 	.word	0x200005ec
 8003554:	200005e8 	.word	0x200005e8
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <xTaskGetTickCount+0x1c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	200005dc 	.word	0x200005dc

0800357c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	@ 0x28
 8003580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003586:	4b7f      	ldr	r3, [pc, #508]	@ (8003784 <xTaskIncrementTick+0x208>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 80f0 	bne.w	8003770 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003590:	4b7d      	ldr	r3, [pc, #500]	@ (8003788 <xTaskIncrementTick+0x20c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003598:	4a7b      	ldr	r2, [pc, #492]	@ (8003788 <xTaskIncrementTick+0x20c>)
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d121      	bne.n	80035e8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80035a4:	4b79      	ldr	r3, [pc, #484]	@ (800378c <xTaskIncrementTick+0x210>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <xTaskIncrementTick+0x4a>
    __asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	607b      	str	r3, [r7, #4]
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <xTaskIncrementTick+0x46>
 80035c6:	4b71      	ldr	r3, [pc, #452]	@ (800378c <xTaskIncrementTick+0x210>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	4b70      	ldr	r3, [pc, #448]	@ (8003790 <xTaskIncrementTick+0x214>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	@ (800378c <xTaskIncrementTick+0x210>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003790 <xTaskIncrementTick+0x214>)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b6e      	ldr	r3, [pc, #440]	@ (8003794 <xTaskIncrementTick+0x218>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	4a6c      	ldr	r2, [pc, #432]	@ (8003794 <xTaskIncrementTick+0x218>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	f000 fbaa 	bl	8003d3c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003798 <xTaskIncrementTick+0x21c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	f0c0 80a9 	bcc.w	8003746 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f4:	4b65      	ldr	r3, [pc, #404]	@ (800378c <xTaskIncrementTick+0x210>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80035fe:	4b66      	ldr	r3, [pc, #408]	@ (8003798 <xTaskIncrementTick+0x21c>)
 8003600:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003604:	601a      	str	r2, [r3, #0]
                    break;
 8003606:	e09e      	b.n	8003746 <xTaskIncrementTick+0x1ca>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003608:	4b60      	ldr	r3, [pc, #384]	@ (800378c <xTaskIncrementTick+0x210>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	d203      	bcs.n	8003628 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003620:	4a5d      	ldr	r2, [pc, #372]	@ (8003798 <xTaskIncrementTick+0x21c>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	6013      	str	r3, [r2, #0]
                        break;
 8003626:	e08e      	b.n	8003746 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	68d2      	ldr	r2, [r2, #12]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	6892      	ldr	r2, [r2, #8]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	3304      	adds	r3, #4
 800364a:	429a      	cmp	r2, r3
 800364c:	d103      	bne.n	8003656 <xTaskIncrementTick+0xda>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2200      	movs	r2, #0
 800365a:	615a      	str	r2, [r3, #20]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1e5a      	subs	r2, r3, #1
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01e      	beq.n	80036ac <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	6a12      	ldr	r2, [r2, #32]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	69d2      	ldr	r2, [r2, #28]
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	3318      	adds	r3, #24
 8003690:	429a      	cmp	r2, r3
 8003692:	d103      	bne.n	800369c <xTaskIncrementTick+0x120>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2200      	movs	r2, #0
 80036a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1e5a      	subs	r2, r3, #1
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b0:	4b3a      	ldr	r3, [pc, #232]	@ (800379c <xTaskIncrementTick+0x220>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d903      	bls.n	80036c0 <xTaskIncrementTick+0x144>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036bc:	4a37      	ldr	r2, [pc, #220]	@ (800379c <xTaskIncrementTick+0x220>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	4936      	ldr	r1, [pc, #216]	@ (80037a0 <xTaskIncrementTick+0x224>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	3204      	adds	r2, #4
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	1d1a      	adds	r2, r3, #4
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <xTaskIncrementTick+0x224>)
 8003704:	441a      	add	r2, r3
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	615a      	str	r2, [r3, #20]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370e:	4924      	ldr	r1, [pc, #144]	@ (80037a0 <xTaskIncrementTick+0x224>)
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	481f      	ldr	r0, [pc, #124]	@ (80037a0 <xTaskIncrementTick+0x224>)
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4403      	add	r3, r0
 800372e:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <xTaskIncrementTick+0x228>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	429a      	cmp	r2, r3
 800373c:	f67f af5a 	bls.w	80035f4 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003744:	e756      	b.n	80035f4 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003746:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <xTaskIncrementTick+0x228>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374c:	4914      	ldr	r1, [pc, #80]	@ (80037a0 <xTaskIncrementTick+0x224>)
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d901      	bls.n	8003762 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003762:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <xTaskIncrementTick+0x22c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	e004      	b.n	800377a <xTaskIncrementTick+0x1fe>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003770:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <xTaskIncrementTick+0x230>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <xTaskIncrementTick+0x230>)
 8003778:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800377c:	4618      	mov	r0, r3
 800377e:	3728      	adds	r7, #40	@ 0x28
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000600 	.word	0x20000600
 8003788:	200005dc 	.word	0x200005dc
 800378c:	20000590 	.word	0x20000590
 8003790:	20000594 	.word	0x20000594
 8003794:	200005f0 	.word	0x200005f0
 8003798:	200005f8 	.word	0x200005f8
 800379c:	200005e0 	.word	0x200005e0
 80037a0:	20000108 	.word	0x20000108
 80037a4:	20000104 	.word	0x20000104
 80037a8:	200005ec 	.word	0x200005ec
 80037ac:	200005e8 	.word	0x200005e8

080037b0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80037b6:	4b29      	ldr	r3, [pc, #164]	@ (800385c <vTaskSwitchContext+0xac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80037be:	4b28      	ldr	r3, [pc, #160]	@ (8003860 <vTaskSwitchContext+0xb0>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80037c4:	e043      	b.n	800384e <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 80037c6:	4b26      	ldr	r3, [pc, #152]	@ (8003860 <vTaskSwitchContext+0xb0>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80037cc:	4b25      	ldr	r3, [pc, #148]	@ (8003864 <vTaskSwitchContext+0xb4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e011      	b.n	80037f8 <vTaskSwitchContext+0x48>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <vTaskSwitchContext+0x42>
    __asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	607b      	str	r3, [r7, #4]
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <vTaskSwitchContext+0x3e>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	491b      	ldr	r1, [pc, #108]	@ (8003868 <vTaskSwitchContext+0xb8>)
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0e3      	beq.n	80037d4 <vTaskSwitchContext+0x24>
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4a14      	ldr	r2, [pc, #80]	@ (8003868 <vTaskSwitchContext+0xb8>)
 8003818:	4413      	add	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3308      	adds	r3, #8
 800382e:	429a      	cmp	r2, r3
 8003830:	d103      	bne.n	800383a <vTaskSwitchContext+0x8a>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <vTaskSwitchContext+0xbc>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4a07      	ldr	r2, [pc, #28]	@ (8003864 <vTaskSwitchContext+0xb4>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800384a:	4b08      	ldr	r3, [pc, #32]	@ (800386c <vTaskSwitchContext+0xbc>)
 800384c:	681b      	ldr	r3, [r3, #0]
    }
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000600 	.word	0x20000600
 8003860:	200005ec 	.word	0x200005ec
 8003864:	200005e0 	.word	0x200005e0
 8003868:	20000108 	.word	0x20000108
 800386c:	20000104 	.word	0x20000104

08003870 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60fb      	str	r3, [r7, #12]
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003898:	4b07      	ldr	r3, [pc, #28]	@ (80038b8 <vTaskPlaceOnEventList+0x48>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3318      	adds	r3, #24
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fe ff9a 	bl	80027da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038a6:	2101      	movs	r1, #1
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f000 fa81 	bl	8003db0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000104 	.word	0x20000104

080038bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	613b      	str	r3, [r7, #16]
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	e7fd      	b.n	80038e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	4b15      	ldr	r3, [pc, #84]	@ (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	61da      	str	r2, [r3, #28]
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	621a      	str	r2, [r3, #32]
 80038fe:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	3218      	adds	r2, #24
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	4b0e      	ldr	r3, [pc, #56]	@ (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f103 0218 	add.w	r2, r3, #24
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <vTaskPlaceOnEventListRestricted+0x88>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	629a      	str	r2, [r3, #40]	@ 0x28
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003932:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68b8      	ldr	r0, [r7, #8]
 8003938:	f000 fa3a 	bl	8003db0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000104 	.word	0x20000104

08003948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003948:	b480      	push	{r7}
 800394a:	b08b      	sub	sp, #44	@ 0x2c
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	60fb      	str	r3, [r7, #12]
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	6a3a      	ldr	r2, [r7, #32]
 8003982:	6a12      	ldr	r2, [r2, #32]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	69d2      	ldr	r2, [r2, #28]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	3318      	adds	r3, #24
 8003998:	429a      	cmp	r2, r3
 800399a:	d103      	bne.n	80039a4 <xTaskRemoveFromEventList+0x5c>
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	2200      	movs	r2, #0
 80039a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80039b4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae4 <xTaskRemoveFromEventList+0x19c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d161      	bne.n	8003a80 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	6a3a      	ldr	r2, [r7, #32]
 80039c8:	68d2      	ldr	r2, [r2, #12]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	6892      	ldr	r2, [r2, #8]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	3304      	adds	r3, #4
 80039de:	429a      	cmp	r2, r3
 80039e0:	d103      	bne.n	80039ea <xTaskRemoveFromEventList+0xa2>
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	2200      	movs	r2, #0
 80039ee:	615a      	str	r2, [r3, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae8 <xTaskRemoveFromEventList+0x1a0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d903      	bls.n	8003a0e <xTaskRemoveFromEventList+0xc6>
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	4a37      	ldr	r2, [pc, #220]	@ (8003ae8 <xTaskRemoveFromEventList+0x1a0>)
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a12:	4936      	ldr	r1, [pc, #216]	@ (8003aec <xTaskRemoveFromEventList+0x1a4>)
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3304      	adds	r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	6a3a      	ldr	r2, [r7, #32]
 8003a38:	3204      	adds	r2, #4
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	1d1a      	adds	r2, r3, #4
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4a26      	ldr	r2, [pc, #152]	@ (8003aec <xTaskRemoveFromEventList+0x1a4>)
 8003a52:	441a      	add	r2, r3
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	615a      	str	r2, [r3, #20]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5c:	4923      	ldr	r1, [pc, #140]	@ (8003aec <xTaskRemoveFromEventList+0x1a4>)
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a3a      	ldr	r2, [r7, #32]
 8003a6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a6e:	1c59      	adds	r1, r3, #1
 8003a70:	481e      	ldr	r0, [pc, #120]	@ (8003aec <xTaskRemoveFromEventList+0x1a4>)
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4403      	add	r3, r0
 8003a7c:	6019      	str	r1, [r3, #0]
 8003a7e:	e01b      	b.n	8003ab8 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a80:	4b1b      	ldr	r3, [pc, #108]	@ (8003af0 <xTaskRemoveFromEventList+0x1a8>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	61da      	str	r2, [r3, #28]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	621a      	str	r2, [r3, #32]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	6a3a      	ldr	r2, [r7, #32]
 8003a9a:	3218      	adds	r2, #24
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f103 0218 	add.w	r2, r3, #24
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	4a11      	ldr	r2, [pc, #68]	@ (8003af0 <xTaskRemoveFromEventList+0x1a8>)
 8003aac:	629a      	str	r2, [r3, #40]	@ 0x28
 8003aae:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <xTaskRemoveFromEventList+0x1a8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8003af0 <xTaskRemoveFromEventList+0x1a8>)
 8003ab6:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <xTaskRemoveFromEventList+0x1ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d905      	bls.n	8003ad2 <xTaskRemoveFromEventList+0x18a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003aca:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <xTaskRemoveFromEventList+0x1b0>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e001      	b.n	8003ad6 <xTaskRemoveFromEventList+0x18e>
        }
        else
        {
            xReturn = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	372c      	adds	r7, #44	@ 0x2c
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	20000600 	.word	0x20000600
 8003ae8:	200005e0 	.word	0x200005e0
 8003aec:	20000108 	.word	0x20000108
 8003af0:	20000598 	.word	0x20000598
 8003af4:	20000104 	.word	0x20000104
 8003af8:	200005ec 	.word	0x200005ec

08003afc <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <vTaskInternalSetTimeOutState+0x24>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <vTaskInternalSetTimeOutState+0x28>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	200005f0 	.word	0x200005f0
 8003b24:	200005dc 	.word	0x200005dc

08003b28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	613b      	str	r3, [r7, #16]
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	60fb      	str	r3, [r7, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	e7fd      	b.n	8003b6a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003b6e:	f000 fdb7 	bl	80046e0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b72:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <xTaskCheckForTimeOut+0xc8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b8a:	d102      	bne.n	8003b92 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	e026      	b.n	8003be0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <xTaskCheckForTimeOut+0xcc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d00a      	beq.n	8003bb4 <xTaskCheckForTimeOut+0x8c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d305      	bcc.n	8003bb4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e015      	b.n	8003be0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20b      	bcs.n	8003bd6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad2      	subs	r2, r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff96 	bl	8003afc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e004      	b.n	8003be0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003be0:	f000 fdb0 	bl	8004744 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8003be4:	69fb      	ldr	r3, [r7, #28]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200005dc 	.word	0x200005dc
 8003bf4:	200005f0 	.word	0x200005f0

08003bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	@ (8003c0c <vTaskMissedYield+0x14>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	200005ec 	.word	0x200005ec

08003c10 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c18:	f000 f852 	bl	8003cc0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <prvIdleTask+0x28>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d9f9      	bls.n	8003c18 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <prvIdleTask+0x2c>)
 8003c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c34:	e7f0      	b.n	8003c18 <prvIdleTask+0x8>
 8003c36:	bf00      	nop
 8003c38:	20000108 	.word	0x20000108
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	e00c      	b.n	8003c66 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a12      	ldr	r2, [pc, #72]	@ (8003ca0 <prvInitialiseTaskLists+0x60>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fd90 	bl	8002780 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3301      	adds	r3, #1
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b37      	cmp	r3, #55	@ 0x37
 8003c6a:	d9ef      	bls.n	8003c4c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c6c:	480d      	ldr	r0, [pc, #52]	@ (8003ca4 <prvInitialiseTaskLists+0x64>)
 8003c6e:	f7fe fd87 	bl	8002780 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c72:	480d      	ldr	r0, [pc, #52]	@ (8003ca8 <prvInitialiseTaskLists+0x68>)
 8003c74:	f7fe fd84 	bl	8002780 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c78:	480c      	ldr	r0, [pc, #48]	@ (8003cac <prvInitialiseTaskLists+0x6c>)
 8003c7a:	f7fe fd81 	bl	8002780 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c7e:	480c      	ldr	r0, [pc, #48]	@ (8003cb0 <prvInitialiseTaskLists+0x70>)
 8003c80:	f7fe fd7e 	bl	8002780 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c84:	480b      	ldr	r0, [pc, #44]	@ (8003cb4 <prvInitialiseTaskLists+0x74>)
 8003c86:	f7fe fd7b 	bl	8002780 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <prvInitialiseTaskLists+0x78>)
 8003c8c:	4a05      	ldr	r2, [pc, #20]	@ (8003ca4 <prvInitialiseTaskLists+0x64>)
 8003c8e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <prvInitialiseTaskLists+0x7c>)
 8003c92:	4a05      	ldr	r2, [pc, #20]	@ (8003ca8 <prvInitialiseTaskLists+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000108 	.word	0x20000108
 8003ca4:	20000568 	.word	0x20000568
 8003ca8:	2000057c 	.word	0x2000057c
 8003cac:	20000598 	.word	0x20000598
 8003cb0:	200005ac 	.word	0x200005ac
 8003cb4:	200005c4 	.word	0x200005c4
 8003cb8:	20000590 	.word	0x20000590
 8003cbc:	20000594 	.word	0x20000594

08003cc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cc6:	e019      	b.n	8003cfc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003cc8:	f000 fd0a 	bl	80046e0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ccc:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <prvCheckTasksWaitingTermination+0x50>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fdb7 	bl	800284c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <prvCheckTasksWaitingTermination+0x54>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8003d14 <prvCheckTasksWaitingTermination+0x54>)
 8003ce6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <prvCheckTasksWaitingTermination+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <prvCheckTasksWaitingTermination+0x58>)
 8003cf0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003cf2:	f000 fd27 	bl	8004744 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f810 	bl	8003d1c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <prvCheckTasksWaitingTermination+0x58>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e1      	bne.n	8003cc8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200005ac 	.word	0x200005ac
 8003d14:	200005d8 	.word	0x200005d8
 8003d18:	200005c0 	.word	0x200005c0

08003d1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fef1 	bl	8004b10 <vPortFree>
            vPortFree( pxTCB );
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 feee 	bl	8004b10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <prvResetNextTaskUnblockTime+0x30>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <prvResetNextTaskUnblockTime+0x34>)
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d50:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d52:	e005      	b.n	8003d60 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <prvResetNextTaskUnblockTime+0x30>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	@ (8003d70 <prvResetNextTaskUnblockTime+0x34>)
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000590 	.word	0x20000590
 8003d70:	200005f8 	.word	0x200005f8

08003d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <xTaskGetSchedulerState+0x34>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d82:	2301      	movs	r3, #1
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	e008      	b.n	8003d9a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d88:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <xTaskGetSchedulerState+0x38>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003d90:	2302      	movs	r3, #2
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	e001      	b.n	8003d9a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8003d9a:	687b      	ldr	r3, [r7, #4]
    }
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	200005e4 	.word	0x200005e4
 8003dac:	20000600 	.word	0x20000600

08003db0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003dba:	4b2f      	ldr	r3, [pc, #188]	@ (8003e78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e7c <prvAddCurrentTaskToDelayedList+0xcc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e80 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fd3a 	bl	800284c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dde:	d124      	bne.n	8003e2a <prvAddCurrentTaskToDelayedList+0x7a>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d021      	beq.n	8003e2a <prvAddCurrentTaskToDelayedList+0x7a>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003de6:	4b28      	ldr	r3, [pc, #160]	@ (8003e88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	4b23      	ldr	r3, [pc, #140]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	6892      	ldr	r2, [r2, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	4b21      	ldr	r3, [pc, #132]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	3204      	adds	r2, #4
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	@ (8003e88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e1a:	615a      	str	r2, [r3, #20]
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e28:	e022      	b.n	8003e70 <prvAddCurrentTaskToDelayedList+0xc0>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e32:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d207      	bcs.n	8003e52 <prvAddCurrentTaskToDelayedList+0xa2>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f7fe fcc5 	bl	80027da <vListInsert>
}
 8003e50:	e00e      	b.n	8003e70 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e52:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	69b8      	ldr	r0, [r7, #24]
 8003e5c:	f7fe fcbd 	bl	80027da <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d202      	bcs.n	8003e70 <prvAddCurrentTaskToDelayedList+0xc0>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e6a:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	200005dc 	.word	0x200005dc
 8003e7c:	20000590 	.word	0x20000590
 8003e80:	20000594 	.word	0x20000594
 8003e84:	20000104 	.word	0x20000104
 8003e88:	200005c4 	.word	0x200005c4
 8003e8c:	200005f8 	.word	0x200005f8

08003e90 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e9a:	f000 fa71 	bl	8004380 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <xTimerCreateTimerTask+0x58>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003ea6:	4b11      	ldr	r3, [pc, #68]	@ (8003eec <xTimerCreateTimerTask+0x5c>)
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	2302      	movs	r3, #2
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eb4:	490e      	ldr	r1, [pc, #56]	@ (8003ef0 <xTimerCreateTimerTask+0x60>)
 8003eb6:	480f      	ldr	r0, [pc, #60]	@ (8003ef4 <xTimerCreateTimerTask+0x64>)
 8003eb8:	f7ff f826 	bl	8002f08 <xTaskCreate>
 8003ebc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	603b      	str	r3, [r7, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8003edc:	687b      	ldr	r3, [r7, #4]
    }
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000634 	.word	0x20000634
 8003eec:	20000638 	.word	0x20000638
 8003ef0:	08004e88 	.word	0x08004e88
 8003ef4:	08003f9d 	.word	0x08003f9d

08003ef8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f04:	e008      	b.n	8003f18 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	699a      	ldr	r2, [r3, #24]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	18d1      	adds	r1, r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f8df 	bl	80040e8 <prvInsertTimerInActiveList>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ea      	bne.n	8003f06 <prvReloadTimer+0xe>
        }
    }
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f46:	4b14      	ldr	r3, [pc, #80]	@ (8003f98 <prvProcessExpiredTimer+0x5c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fc79 	bl	800284c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff ffc3 	bl	8003ef8 <prvReloadTimer>
 8003f72:	e008      	b.n	8003f86 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	4798      	blx	r3
    }
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000062c 	.word	0x2000062c

08003f9c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fa4:	f107 0308 	add.w	r3, r7, #8
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f859 	bl	8004060 <prvGetNextExpireTime>
 8003fae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f805 	bl	8003fc4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fba:	f000 f8d7 	bl	800416c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fbe:	bf00      	nop
 8003fc0:	e7f0      	b.n	8003fa4 <prvTimerTask+0x8>
	...

08003fc4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fce:	f7ff f9ad 	bl	800332c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f866 	bl	80040a8 <prvSampleTimeNow>
 8003fdc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d130      	bne.n	8004046 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <prvProcessTimerOrBlockTask+0x3c>
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d806      	bhi.n	8004000 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003ff2:	f7ff f9a9 	bl	8003348 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ff6:	68f9      	ldr	r1, [r7, #12]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff9f 	bl	8003f3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ffe:	e024      	b.n	800404a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <prvProcessTimerOrBlockTask+0x90>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <prvProcessTimerOrBlockTask+0x50>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <prvProcessTimerOrBlockTask+0x52>
 8004014:	2300      	movs	r3, #0
 8004016:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004018:	4b0f      	ldr	r3, [pc, #60]	@ (8004058 <prvProcessTimerOrBlockTask+0x94>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	f7fe feff 	bl	8002e28 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800402a:	f7ff f98d 	bl	8003348 <xTaskResumeAll>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004034:	4b09      	ldr	r3, [pc, #36]	@ (800405c <prvProcessTimerOrBlockTask+0x98>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
    }
 8004044:	e001      	b.n	800404a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004046:	f7ff f97f 	bl	8003348 <xTaskResumeAll>
    }
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000630 	.word	0x20000630
 8004058:	20000634 	.word	0x20000634
 800405c:	e000ed04 	.word	0xe000ed04

08004060 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004068:	4b0e      	ldr	r3, [pc, #56]	@ (80040a4 <prvGetNextExpireTime+0x44>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <prvGetNextExpireTime+0x16>
 8004072:	2201      	movs	r2, #1
 8004074:	e000      	b.n	8004078 <prvGetNextExpireTime+0x18>
 8004076:	2200      	movs	r2, #0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <prvGetNextExpireTime+0x44>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	e001      	b.n	8004094 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004094:	68fb      	ldr	r3, [r7, #12]
    }
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000062c 	.word	0x2000062c

080040a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80040b0:	f7ff fa54 	bl	800355c <xTaskGetTickCount>
 80040b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040b6:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <prvSampleTimeNow+0x3c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d205      	bcs.n	80040cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040c0:	f000 f938 	bl	8004334 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e002      	b.n	80040d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040d2:	4a04      	ldr	r2, [pc, #16]	@ (80040e4 <prvSampleTimeNow+0x3c>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040d8:	68fb      	ldr	r3, [r7, #12]
    }
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2000063c 	.word	0x2000063c

080040e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d812      	bhi.n	8004134 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e01b      	b.n	800415a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <prvInsertTimerInActiveList+0x7c>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7fe fb54 	bl	80027da <vListInsert>
 8004132:	e012      	b.n	800415a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d206      	bcs.n	800414a <prvInsertTimerInActiveList+0x62>
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e007      	b.n	800415a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800414a:	4b07      	ldr	r3, [pc, #28]	@ (8004168 <prvInsertTimerInActiveList+0x80>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f7fe fb40 	bl	80027da <vListInsert>
            }
        }

        return xProcessTimerNow;
 800415a:	697b      	ldr	r3, [r7, #20]
    }
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000630 	.word	0x20000630
 8004168:	2000062c 	.word	0x2000062c

0800416c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	@ 0x28
 8004170:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800417e:	e0c7      	b.n	8004310 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da19      	bge.n	80041ba <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	3304      	adds	r3, #4
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	61bb      	str	r3, [r7, #24]
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b0:	6850      	ldr	r0, [r2, #4]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f2c0 80a7 	blt.w	8004310 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe fb3a 	bl	800284c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041d8:	463b      	mov	r3, r7
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff64 	bl	80040a8 <prvSampleTimeNow>
 80041e0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	f200 808f 	bhi.w	800430a <prvProcessReceivedCommands+0x19e>
 80041ec:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <prvProcessReceivedCommands+0x88>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004219 	.word	0x08004219
 80041fc:	08004281 	.word	0x08004281
 8004200:	08004295 	.word	0x08004295
 8004204:	080042e1 	.word	0x080042e1
 8004208:	08004219 	.word	0x08004219
 800420c:	08004219 	.word	0x08004219
 8004210:	08004281 	.word	0x08004281
 8004214:	08004295 	.word	0x08004295
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	18d1      	adds	r1, r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	6a38      	ldr	r0, [r7, #32]
 8004238:	f7ff ff56 	bl	80040e8 <prvInsertTimerInActiveList>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d065      	beq.n	800430e <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	4413      	add	r3, r2
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	4619      	mov	r1, r3
 800425c:	6a38      	ldr	r0, [r7, #32]
 800425e:	f7ff fe4b 	bl	8003ef8 <prvReloadTimer>
 8004262:	e008      	b.n	8004276 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	6a38      	ldr	r0, [r7, #32]
 800427c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800427e:	e046      	b.n	800430e <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	b2da      	uxtb	r2, r3
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004292:	e03d      	b.n	8004310 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <prvProcessReceivedCommands+0x160>
    __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	617b      	str	r3, [r7, #20]
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	18d1      	adds	r1, r2, r3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	6a38      	ldr	r0, [r7, #32]
 80042da:	f7ff ff05 	bl	80040e8 <prvInsertTimerInActiveList>
                        break;
 80042de:	e017      	b.n	8004310 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 80042ee:	6a38      	ldr	r0, [r7, #32]
 80042f0:	f000 fc0e 	bl	8004b10 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042f4:	e00c      	b.n	8004310 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	b2da      	uxtb	r2, r3
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004308:	e002      	b.n	8004310 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <prvProcessReceivedCommands+0x1a4>
                        break;
 800430e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004310:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <prvProcessReceivedCommands+0x1c4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1d39      	adds	r1, r7, #4
 8004316:	2200      	movs	r2, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe fbc5 	bl	8002aa8 <xQueueReceive>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f af2d 	bne.w	8004180 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	3728      	adds	r7, #40	@ 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000634 	.word	0x20000634

08004334 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800433a:	e009      	b.n	8004350 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800433c:	4b0e      	ldr	r3, [pc, #56]	@ (8004378 <prvSwitchTimerLists+0x44>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004346:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800434a:	6838      	ldr	r0, [r7, #0]
 800434c:	f7ff fdf6 	bl	8003f3c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004350:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <prvSwitchTimerLists+0x44>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <prvSwitchTimerLists+0x44>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004360:	4b06      	ldr	r3, [pc, #24]	@ (800437c <prvSwitchTimerLists+0x48>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a04      	ldr	r2, [pc, #16]	@ (8004378 <prvSwitchTimerLists+0x44>)
 8004366:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004368:	4a04      	ldr	r2, [pc, #16]	@ (800437c <prvSwitchTimerLists+0x48>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6013      	str	r3, [r2, #0]
    }
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	2000062c 	.word	0x2000062c
 800437c:	20000630 	.word	0x20000630

08004380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004384:	f000 f9ac 	bl	80046e0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004388:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <prvCheckForValidListAndQueue+0x54>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11d      	bne.n	80043cc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004390:	4811      	ldr	r0, [pc, #68]	@ (80043d8 <prvCheckForValidListAndQueue+0x58>)
 8004392:	f7fe f9f5 	bl	8002780 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004396:	4811      	ldr	r0, [pc, #68]	@ (80043dc <prvCheckForValidListAndQueue+0x5c>)
 8004398:	f7fe f9f2 	bl	8002780 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800439c:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <prvCheckForValidListAndQueue+0x60>)
 800439e:	4a0e      	ldr	r2, [pc, #56]	@ (80043d8 <prvCheckForValidListAndQueue+0x58>)
 80043a0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043a2:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <prvCheckForValidListAndQueue+0x64>)
 80043a4:	4a0d      	ldr	r2, [pc, #52]	@ (80043dc <prvCheckForValidListAndQueue+0x5c>)
 80043a6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80043a8:	2200      	movs	r2, #0
 80043aa:	2110      	movs	r1, #16
 80043ac:	200a      	movs	r0, #10
 80043ae:	f7fe fb09 	bl	80029c4 <xQueueGenericCreate>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4a07      	ldr	r2, [pc, #28]	@ (80043d4 <prvCheckForValidListAndQueue+0x54>)
 80043b6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <prvCheckForValidListAndQueue+0x54>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <prvCheckForValidListAndQueue+0x54>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4908      	ldr	r1, [pc, #32]	@ (80043e8 <prvCheckForValidListAndQueue+0x68>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fcde 	bl	8002d88 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043cc:	f000 f9ba 	bl	8004744 <vPortExitCritical>
    }
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000634 	.word	0x20000634
 80043d8:	20000604 	.word	0x20000604
 80043dc:	20000618 	.word	0x20000618
 80043e0:	2000062c 	.word	0x2000062c
 80043e4:	20000630 	.word	0x20000630
 80043e8:	08004e90 	.word	0x08004e90

080043ec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3b04      	subs	r3, #4
 80043fc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004404:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b04      	subs	r3, #4
 800440a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b04      	subs	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800441c:	4a0c      	ldr	r2, [pc, #48]	@ (8004450 <pxPortInitialiseStack+0x64>)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b14      	subs	r3, #20
 8004426:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b04      	subs	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f06f 0202 	mvn.w	r2, #2
 800443a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3b20      	subs	r3, #32
 8004440:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004442:	68fb      	ldr	r3, [r7, #12]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	08004455 	.word	0x08004455

08004454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800445e:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <prvTaskExitError+0x58>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004466:	d00b      	beq.n	8004480 <prvTaskExitError+0x2c>
    __asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <prvTaskExitError+0x28>
    __asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60bb      	str	r3, [r7, #8]
}
 8004492:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004494:	bf00      	nop
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0fc      	beq.n	8004496 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000010 	.word	0x20000010

080044b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <SVC_Handler+0x1c>)
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	f380 8809 	msr	PSP, r0
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8811 	msr	BASEPRI, r0
 80044ca:	4770      	bx	lr
 80044cc:	20000104 	.word	0x20000104
        "   msr basepri, r0                 \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop

080044d4 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80044d4:	4808      	ldr	r0, [pc, #32]	@ (80044f8 <prvPortStartFirstTask+0x24>)
 80044d6:	6800      	ldr	r0, [r0, #0]
 80044d8:	6800      	ldr	r0, [r0, #0]
 80044da:	f380 8808 	msr	MSP, r0
 80044de:	f04f 0000 	mov.w	r0, #0
 80044e2:	f380 8814 	msr	CONTROL, r0
 80044e6:	b662      	cpsie	i
 80044e8:	b661      	cpsie	f
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	df00      	svc	0
 80044f4:	bf00      	nop
 80044f6:	0000      	.short	0x0000
 80044f8:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop

08004500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	@ 0x30
 8004504:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004506:	4b69      	ldr	r3, [pc, #420]	@ (80046ac <xPortStartScheduler+0x1ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a69      	ldr	r2, [pc, #420]	@ (80046b0 <xPortStartScheduler+0x1b0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10b      	bne.n	8004528 <xPortStartScheduler+0x28>
    __asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004528:	4b60      	ldr	r3, [pc, #384]	@ (80046ac <xPortStartScheduler+0x1ac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a61      	ldr	r2, [pc, #388]	@ (80046b4 <xPortStartScheduler+0x1b4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10b      	bne.n	800454a <xPortStartScheduler+0x4a>
    __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	623b      	str	r3, [r7, #32]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800454a:	4b5b      	ldr	r3, [pc, #364]	@ (80046b8 <xPortStartScheduler+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	332c      	adds	r3, #44	@ 0x2c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a59      	ldr	r2, [pc, #356]	@ (80046bc <xPortStartScheduler+0x1bc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00b      	beq.n	8004574 <xPortStartScheduler+0x74>
    __asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	61fb      	str	r3, [r7, #28]
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004576:	3338      	adds	r3, #56	@ 0x38
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a51      	ldr	r2, [pc, #324]	@ (80046c0 <xPortStartScheduler+0x1c0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <xPortStartScheduler+0x98>
    __asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	61bb      	str	r3, [r7, #24]
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	e7fd      	b.n	8004594 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800459c:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <xPortStartScheduler+0x1c4>)
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	22ff      	movs	r2, #255	@ 0xff
 80045ac:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	4b41      	ldr	r3, [pc, #260]	@ (80046c8 <xPortStartScheduler+0x1c8>)
 80045c2:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80045c4:	4b40      	ldr	r3, [pc, #256]	@ (80046c8 <xPortStartScheduler+0x1c8>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <xPortStartScheduler+0xe4>
    __asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	617b      	str	r3, [r7, #20]
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d013      	beq.n	800461a <xPortStartScheduler+0x11a>
    __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	613b      	str	r3, [r7, #16]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3301      	adds	r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004622:	2b80      	cmp	r3, #128	@ 0x80
 8004624:	d0f1      	beq.n	800460a <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d103      	bne.n	8004634 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800462c:	4b27      	ldr	r3, [pc, #156]	@ (80046cc <xPortStartScheduler+0x1cc>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e004      	b.n	800463e <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f1c3 0307 	rsb	r3, r3, #7
 800463a:	4a24      	ldr	r2, [pc, #144]	@ (80046cc <xPortStartScheduler+0x1cc>)
 800463c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800463e:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <xPortStartScheduler+0x1cc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	4a21      	ldr	r2, [pc, #132]	@ (80046cc <xPortStartScheduler+0x1cc>)
 8004646:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004648:	4b20      	ldr	r3, [pc, #128]	@ (80046cc <xPortStartScheduler+0x1cc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004650:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <xPortStartScheduler+0x1cc>)
 8004652:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800465c:	4b1c      	ldr	r3, [pc, #112]	@ (80046d0 <xPortStartScheduler+0x1d0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <xPortStartScheduler+0x1d0>)
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004666:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004668:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <xPortStartScheduler+0x1d0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a18      	ldr	r2, [pc, #96]	@ (80046d0 <xPortStartScheduler+0x1d0>)
 800466e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004672:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004674:	4b17      	ldr	r3, [pc, #92]	@ (80046d4 <xPortStartScheduler+0x1d4>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800467a:	f000 f8e1 	bl	8004840 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800467e:	4b16      	ldr	r3, [pc, #88]	@ (80046d8 <xPortStartScheduler+0x1d8>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004684:	f000 f900 	bl	8004888 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004688:	4b14      	ldr	r3, [pc, #80]	@ (80046dc <xPortStartScheduler+0x1dc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a13      	ldr	r2, [pc, #76]	@ (80046dc <xPortStartScheduler+0x1dc>)
 800468e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004692:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004694:	f7ff ff1e 	bl	80044d4 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004698:	f7ff f88a 	bl	80037b0 <vTaskSwitchContext>
    prvTaskExitError();
 800469c:	f7ff feda 	bl	8004454 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3730      	adds	r7, #48	@ 0x30
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	410fc271 	.word	0x410fc271
 80046b4:	410fc270 	.word	0x410fc270
 80046b8:	e000ed08 	.word	0xe000ed08
 80046bc:	080044b1 	.word	0x080044b1
 80046c0:	08004799 	.word	0x08004799
 80046c4:	e000e400 	.word	0xe000e400
 80046c8:	20000640 	.word	0x20000640
 80046cc:	20000644 	.word	0x20000644
 80046d0:	e000ed20 	.word	0xe000ed20
 80046d4:	e000ed1c 	.word	0xe000ed1c
 80046d8:	20000010 	.word	0x20000010
 80046dc:	e000ef34 	.word	0xe000ef34

080046e0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
    __asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	607b      	str	r3, [r7, #4]
}
 80046f8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046fa:	4b10      	ldr	r3, [pc, #64]	@ (800473c <vPortEnterCritical+0x5c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	4a0e      	ldr	r2, [pc, #56]	@ (800473c <vPortEnterCritical+0x5c>)
 8004702:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004704:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <vPortEnterCritical+0x5c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d110      	bne.n	800472e <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800470c:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <vPortEnterCritical+0x60>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <vPortEnterCritical+0x4e>
    __asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	603b      	str	r3, [r7, #0]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <vPortEnterCritical+0x4a>
    }
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000010 	.word	0x20000010
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800474a:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <vPortExitCritical+0x50>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10b      	bne.n	800476a <vPortExitCritical+0x26>
    __asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	607b      	str	r3, [r7, #4]
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	e7fd      	b.n	8004766 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800476a:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <vPortExitCritical+0x50>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3b01      	subs	r3, #1
 8004770:	4a08      	ldr	r2, [pc, #32]	@ (8004794 <vPortExitCritical+0x50>)
 8004772:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004774:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <vPortExitCritical+0x50>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <vPortExitCritical+0x44>
 800477c:	2300      	movs	r3, #0
 800477e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004786:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	20000010 	.word	0x20000010

08004798 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004798:	f3ef 8009 	mrs	r0, PSP
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	4b14      	ldr	r3, [pc, #80]	@ (80047f4 <PendSV_Handler+0x5c>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	f01e 0f10 	tst.w	lr, #16
 80047a8:	bf08      	it	eq
 80047aa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047ae:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b2:	6010      	str	r0, [r2, #0]
 80047b4:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047b8:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047bc:	f380 8811 	msr	BASEPRI, r0
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f7fe fff2 	bl	80037b0 <vTaskSwitchContext>
 80047cc:	f04f 0000 	mov.w	r0, #0
 80047d0:	f380 8811 	msr	BASEPRI, r0
 80047d4:	bc09      	pop	{r0, r3}
 80047d6:	6819      	ldr	r1, [r3, #0]
 80047d8:	6808      	ldr	r0, [r1, #0]
 80047da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047de:	f01e 0f10 	tst.w	lr, #16
 80047e2:	bf08      	it	eq
 80047e4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047e8:	f380 8809 	msr	PSP, r0
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	4770      	bx	lr
 80047f2:	0000      	.short	0x0000
 80047f4:	20000104 	.word	0x20000104
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop

080047fc <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
    __asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	607b      	str	r3, [r7, #4]
}
 8004814:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004816:	f7fe feb1 	bl	800357c <xTaskIncrementTick>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004820:	4b06      	ldr	r3, [pc, #24]	@ (800483c <SysTick_Handler+0x40>)
 8004822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	2300      	movs	r3, #0
 800482a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f383 8811 	msr	BASEPRI, r3
}
 8004832:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	e000ed04 	.word	0xe000ed04

08004840 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004844:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <vPortSetupTimerInterrupt+0x34>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800484a:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <vPortSetupTimerInterrupt+0x38>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004850:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <vPortSetupTimerInterrupt+0x3c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0a      	ldr	r2, [pc, #40]	@ (8004880 <vPortSetupTimerInterrupt+0x40>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	099b      	lsrs	r3, r3, #6
 800485c:	4a09      	ldr	r2, [pc, #36]	@ (8004884 <vPortSetupTimerInterrupt+0x44>)
 800485e:	3b01      	subs	r3, #1
 8004860:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004862:	4b04      	ldr	r3, [pc, #16]	@ (8004874 <vPortSetupTimerInterrupt+0x34>)
 8004864:	2207      	movs	r2, #7
 8004866:	601a      	str	r2, [r3, #0]
}
 8004868:	bf00      	nop
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	e000e010 	.word	0xe000e010
 8004878:	e000e018 	.word	0xe000e018
 800487c:	20000000 	.word	0x20000000
 8004880:	10624dd3 	.word	0x10624dd3
 8004884:	e000e014 	.word	0xe000e014

08004888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004888:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004898 <vPortEnableVFP+0x10>
 800488c:	6801      	ldr	r1, [r0, #0]
 800488e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004892:	6001      	str	r1, [r0, #0]
 8004894:	4770      	bx	lr
 8004896:	0000      	.short	0x0000
 8004898:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop

080048a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	@ 0x38
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d022      	beq.n	80048fc <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80048b6:	2308      	movs	r3, #8
 80048b8:	43db      	mvns	r3, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d81b      	bhi.n	80048f8 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 80048c0:	2208      	movs	r2, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d014      	beq.n	80048fc <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	f1c3 0308 	rsb	r3, r3, #8
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	43db      	mvns	r3, r3
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d804      	bhi.n	80048f2 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	4413      	add	r3, r2
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	e004      	b.n	80048fc <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	e001      	b.n	80048fc <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80048fc:	f7fe fd16 	bl	800332c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004900:	4b7c      	ldr	r3, [pc, #496]	@ (8004af4 <pvPortMalloc+0x254>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8004908:	f000 f97c 	bl	8004c04 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f2c0 80d7 	blt.w	8004ac2 <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80d3 	beq.w	8004ac2 <pvPortMalloc+0x222>
 800491c:	4b76      	ldr	r3, [pc, #472]	@ (8004af8 <pvPortMalloc+0x258>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	f200 80cd 	bhi.w	8004ac2 <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004928:	4b74      	ldr	r3, [pc, #464]	@ (8004afc <pvPortMalloc+0x25c>)
 800492a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800492c:	4b73      	ldr	r3, [pc, #460]	@ (8004afc <pvPortMalloc+0x25c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8004932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004934:	4a72      	ldr	r2, [pc, #456]	@ (8004b00 <pvPortMalloc+0x260>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d305      	bcc.n	8004946 <pvPortMalloc+0xa6>
 800493a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493c:	4a71      	ldr	r2, [pc, #452]	@ (8004b04 <pvPortMalloc+0x264>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d801      	bhi.n	8004946 <pvPortMalloc+0xa6>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <pvPortMalloc+0xa8>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d129      	bne.n	80049a0 <pvPortMalloc+0x100>
    __asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	61fb      	str	r3, [r7, #28]
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004966:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800496e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004970:	4a63      	ldr	r2, [pc, #396]	@ (8004b00 <pvPortMalloc+0x260>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d305      	bcc.n	8004982 <pvPortMalloc+0xe2>
 8004976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004978:	4a62      	ldr	r2, [pc, #392]	@ (8004b04 <pvPortMalloc+0x264>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d801      	bhi.n	8004982 <pvPortMalloc+0xe2>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <pvPortMalloc+0xe4>
 8004982:	2300      	movs	r3, #0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <pvPortMalloc+0x100>
    __asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	61bb      	str	r3, [r7, #24]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80049a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d903      	bls.n	80049b2 <pvPortMalloc+0x112>
 80049aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1d8      	bne.n	8004964 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049b2:	4b50      	ldr	r3, [pc, #320]	@ (8004af4 <pvPortMalloc+0x254>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f000 8082 	beq.w	8004ac2 <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2208      	movs	r2, #8
 80049c4:	4413      	add	r3, r2
 80049c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80049c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ca:	4a4d      	ldr	r2, [pc, #308]	@ (8004b00 <pvPortMalloc+0x260>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d305      	bcc.n	80049dc <pvPortMalloc+0x13c>
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004b04 <pvPortMalloc+0x264>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d801      	bhi.n	80049dc <pvPortMalloc+0x13c>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <pvPortMalloc+0x13e>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <pvPortMalloc+0x15a>
    __asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	617b      	str	r3, [r7, #20]
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	e7fd      	b.n	80049f6 <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d90b      	bls.n	8004a24 <pvPortMalloc+0x184>
    __asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	613b      	str	r3, [r7, #16]
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d924      	bls.n	8004a7e <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <pvPortMalloc+0x1be>
    __asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	60fb      	str	r3, [r7, #12]
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <pvPortMalloc+0x258>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	4a1b      	ldr	r2, [pc, #108]	@ (8004af8 <pvPortMalloc+0x258>)
 8004a8a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <pvPortMalloc+0x258>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b1d      	ldr	r3, [pc, #116]	@ (8004b08 <pvPortMalloc+0x268>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d203      	bcs.n	8004aa0 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a98:	4b17      	ldr	r3, [pc, #92]	@ (8004af8 <pvPortMalloc+0x258>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <pvPortMalloc+0x268>)
 8004a9e:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ab8:	4b14      	ldr	r3, [pc, #80]	@ (8004b0c <pvPortMalloc+0x26c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <pvPortMalloc+0x26c>)
 8004ac0:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8004ac2:	f7fe fc41 	bl	8003348 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <pvPortMalloc+0x248>
    __asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60bb      	str	r3, [r7, #8]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <pvPortMalloc+0x244>
    return pvReturn;
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3738      	adds	r7, #56	@ 0x38
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20004250 	.word	0x20004250
 8004af8:	20004254 	.word	0x20004254
 8004afc:	20004248 	.word	0x20004248
 8004b00:	20000648 	.word	0x20000648
 8004b04:	20004247 	.word	0x20004247
 8004b08:	20004258 	.word	0x20004258
 8004b0c:	2000425c 	.word	0x2000425c

08004b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d064      	beq.n	8004bec <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b22:	2308      	movs	r3, #8
 8004b24:	425b      	negs	r3, r3
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	4a30      	ldr	r2, [pc, #192]	@ (8004bf4 <vPortFree+0xe4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d305      	bcc.n	8004b44 <vPortFree+0x34>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004bf8 <vPortFree+0xe8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d801      	bhi.n	8004b44 <vPortFree+0x34>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <vPortFree+0x36>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <vPortFree+0x52>
    __asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	617b      	str	r3, [r7, #20]
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db0b      	blt.n	8004b82 <vPortFree+0x72>
    __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	613b      	str	r3, [r7, #16]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <vPortFree+0x92>
    __asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	60fb      	str	r3, [r7, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0fdb      	lsrs	r3, r3, #31
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01c      	beq.n	8004bec <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d118      	bne.n	8004bec <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004bc6:	f7fe fbb1 	bl	800332c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <vPortFree+0xec>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	4a09      	ldr	r2, [pc, #36]	@ (8004bfc <vPortFree+0xec>)
 8004bd6:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bd8:	69b8      	ldr	r0, [r7, #24]
 8004bda:	f000 f86d 	bl	8004cb8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004bde:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <vPortFree+0xf0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a06      	ldr	r2, [pc, #24]	@ (8004c00 <vPortFree+0xf0>)
 8004be6:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004be8:	f7fe fbae 	bl	8003348 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004bec:	bf00      	nop
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000648 	.word	0x20000648
 8004bf8:	20004247 	.word	0x20004247
 8004bfc:	20004254 	.word	0x20004254
 8004c00:	20004260 	.word	0x20004260

08004c04 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c0e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c10:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <prvHeapInit+0xa0>)
 8004c12:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3307      	adds	r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <prvHeapInit+0xa0>)
 8004c34:	4413      	add	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca8 <prvHeapInit+0xa4>)
 8004c3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca8 <prvHeapInit+0xa4>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f023 0307 	bic.w	r3, r3, #7
 8004c5a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <prvHeapInit+0xa8>)
 8004c60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c62:	4b12      	ldr	r3, [pc, #72]	@ (8004cac <prvHeapInit+0xa8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004c6a:	4b10      	ldr	r3, [pc, #64]	@ (8004cac <prvHeapInit+0xa8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004c80:	4b0a      	ldr	r3, [pc, #40]	@ (8004cac <prvHeapInit+0xa8>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <prvHeapInit+0xac>)
 8004c8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4a07      	ldr	r2, [pc, #28]	@ (8004cb4 <prvHeapInit+0xb0>)
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20000648 	.word	0x20000648
 8004ca8:	20004248 	.word	0x20004248
 8004cac:	20004250 	.word	0x20004250
 8004cb0:	20004258 	.word	0x20004258
 8004cb4:	20004254 	.word	0x20004254

08004cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004cc0:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <prvInsertBlockIntoFreeList+0xe4>)
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e002      	b.n	8004ccc <prvInsertBlockIntoFreeList+0x14>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d8f7      	bhi.n	8004cc6 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4a30      	ldr	r2, [pc, #192]	@ (8004d9c <prvInsertBlockIntoFreeList+0xe4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8004da0 <prvInsertBlockIntoFreeList+0xe8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d305      	bcc.n	8004cf2 <prvInsertBlockIntoFreeList+0x3a>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8004da4 <prvInsertBlockIntoFreeList+0xec>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d801      	bhi.n	8004cf2 <prvInsertBlockIntoFreeList+0x3a>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x3c>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60fb      	str	r3, [r7, #12]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d108      	bne.n	8004d34 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	441a      	add	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	441a      	add	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d118      	bne.n	8004d7a <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b16      	ldr	r3, [pc, #88]	@ (8004da8 <prvInsertBlockIntoFreeList+0xf0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d00d      	beq.n	8004d70 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	441a      	add	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e008      	b.n	8004d82 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004d70:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <prvInsertBlockIntoFreeList+0xf0>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e003      	b.n	8004d82 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d002      	beq.n	8004d90 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	20004248 	.word	0x20004248
 8004da0:	20000648 	.word	0x20000648
 8004da4:	20004247 	.word	0x20004247
 8004da8:	20004250 	.word	0x20004250

08004dac <memset>:
 8004dac:	4402      	add	r2, r0
 8004dae:	4603      	mov	r3, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004df4 <__libc_init_array+0x38>)
 8004dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8004df8 <__libc_init_array+0x3c>)
 8004dc2:	1b64      	subs	r4, r4, r5
 8004dc4:	10a4      	asrs	r4, r4, #2
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8004dfc <__libc_init_array+0x40>)
 8004dce:	4c0c      	ldr	r4, [pc, #48]	@ (8004e00 <__libc_init_array+0x44>)
 8004dd0:	f000 f826 	bl	8004e20 <_init>
 8004dd4:	1b64      	subs	r4, r4, r5
 8004dd6:	10a4      	asrs	r4, r4, #2
 8004dd8:	2600      	movs	r6, #0
 8004dda:	42a6      	cmp	r6, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de4:	4798      	blx	r3
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dee:	4798      	blx	r3
 8004df0:	3601      	adds	r6, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08004eb8 	.word	0x08004eb8
 8004df8:	08004eb8 	.word	0x08004eb8
 8004dfc:	08004eb8 	.word	0x08004eb8
 8004e00:	08004ebc 	.word	0x08004ebc

08004e04 <memcpy>:
 8004e04:	440a      	add	r2, r1
 8004e06:	4291      	cmp	r1, r2
 8004e08:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004e0c:	d100      	bne.n	8004e10 <memcpy+0xc>
 8004e0e:	4770      	bx	lr
 8004e10:	b510      	push	{r4, lr}
 8004e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	d1f9      	bne.n	8004e12 <memcpy+0xe>
 8004e1e:	bd10      	pop	{r4, pc}

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
